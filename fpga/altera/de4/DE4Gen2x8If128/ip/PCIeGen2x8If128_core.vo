//IP Functional Simulation Model
//VERSION_BEGIN 17.1 cbx_mgl 2017:10:19:06:38:12:SJ cbx_simgen 2017:10:19:05:46:40:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Intel disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = lut 185 mux21 282 oper_add 6 oper_less_than 8 stratixiv_hssi_pcie_hip 1 
`timescale 1 ps / 1 ps
module  PCIeGen2x8If128_core
	( 
	aer_msi_num,
	app_int_ack,
	app_int_sts,
	app_msi_ack,
	app_msi_num,
	app_msi_req,
	app_msi_tc,
	AvlClk_i,
	avs_pcie_reconfig_readdata,
	avs_pcie_reconfig_readdatavalid,
	avs_pcie_reconfig_waitrequest,
	core_clk_in,
	core_clk_out,
	cpl_err,
	cpl_pending,
	CraAddress_i,
	CraByteEnable_i,
	CraChipSelect_i,
	CraIrq_o,
	CraRead,
	CraReadData_o,
	CraWaitRequest_o,
	CraWrite,
	CraWriteData_i,
	crst,
	derr_cor_ext_rcv0,
	derr_cor_ext_rpl,
	derr_rpl,
	dl_ltssm,
	dlup_exit,
	eidle_infer_sel,
	ev_128ns,
	ev_1us,
	hip_extraclkout,
	hotrst_exit,
	hpg_ctrler,
	int_status,
	l2_exit,
	lane_act,
	lmi_ack,
	lmi_addr,
	lmi_din,
	lmi_dout,
	lmi_rden,
	lmi_wren,
	npd_alloc_1cred_vc0,
	npd_cred_vio_vc0,
	nph_alloc_1cred_vc0,
	nph_cred_vio_vc0,
	npor,
	pclk_central,
	pclk_ch0,
	pex_msi_num,
	phystatus0_ext,
	phystatus1_ext,
	phystatus2_ext,
	phystatus3_ext,
	phystatus4_ext,
	phystatus5_ext,
	phystatus6_ext,
	phystatus7_ext,
	pld_clk,
	pll_fixed_clk,
	pm_auxpwr,
	pm_data,
	pm_event,
	pme_to_cr,
	pme_to_sr,
	powerdown0_ext,
	powerdown1_ext,
	powerdown2_ext,
	powerdown3_ext,
	powerdown4_ext,
	powerdown5_ext,
	powerdown6_ext,
	powerdown7_ext,
	r2c_err0,
	rate_ext,
	rc_areset,
	rc_gxb_powerdown,
	rc_inclk_eq_125mhz,
	rc_pll_locked,
	rc_rx_analogreset,
	rc_rx_digitalreset,
	rc_rx_pll_locked_one,
	rc_tx_digitalreset,
	reset_status,
	Rstn_i,
	rx_fifo_empty0,
	rx_fifo_full0,
	rx_st_bardec0,
	rx_st_be0,
	rx_st_be0_p1,
	rx_st_data0,
	rx_st_data0_p1,
	rx_st_eop0,
	rx_st_eop0_p1,
	rx_st_err0,
	rx_st_mask0,
	rx_st_ready0,
	rx_st_sop0,
	rx_st_sop0_p1,
	rx_st_valid0,
	rxdata0_ext,
	rxdata1_ext,
	rxdata2_ext,
	rxdata3_ext,
	rxdata4_ext,
	rxdata5_ext,
	rxdata6_ext,
	rxdata7_ext,
	rxdatak0_ext,
	rxdatak1_ext,
	rxdatak2_ext,
	rxdatak3_ext,
	rxdatak4_ext,
	rxdatak5_ext,
	rxdatak6_ext,
	rxdatak7_ext,
	rxelecidle0_ext,
	rxelecidle1_ext,
	rxelecidle2_ext,
	rxelecidle3_ext,
	rxelecidle4_ext,
	rxelecidle5_ext,
	rxelecidle6_ext,
	rxelecidle7_ext,
	RxmAddress_o,
	RxmBurstCount_o,
	RxmByteEnable_o,
	RxmIrq_i,
	RxmIrqNum_i,
	RxmRead_o,
	RxmReadData_i,
	RxmReadDataValid_i,
	RxmWaitRequest_i,
	RxmWrite_o,
	RxmWriteData_o,
	rxpolarity0_ext,
	rxpolarity1_ext,
	rxpolarity2_ext,
	rxpolarity3_ext,
	rxpolarity4_ext,
	rxpolarity5_ext,
	rxpolarity6_ext,
	rxpolarity7_ext,
	rxstatus0_ext,
	rxstatus1_ext,
	rxstatus2_ext,
	rxstatus3_ext,
	rxstatus4_ext,
	rxstatus5_ext,
	rxstatus6_ext,
	rxstatus7_ext,
	rxvalid0_ext,
	rxvalid1_ext,
	rxvalid2_ext,
	rxvalid3_ext,
	rxvalid4_ext,
	rxvalid5_ext,
	rxvalid6_ext,
	rxvalid7_ext,
	serr_out,
	srst,
	suc_spd_neg,
	swdn_wake,
	swup_hotrst,
	test_in,
	test_out,
	tl_cfg_add,
	tl_cfg_ctl,
	tl_cfg_ctl_wr,
	tl_cfg_sts,
	tl_cfg_sts_wr,
	tx_cred0,
	tx_deemph,
	tx_fifo_empty0,
	tx_fifo_full0,
	tx_fifo_rdptr0,
	tx_fifo_wrptr0,
	tx_margin,
	tx_st_data0,
	tx_st_data0_p1,
	tx_st_eop0,
	tx_st_eop0_p1,
	tx_st_err0,
	tx_st_ready0,
	tx_st_sop0,
	tx_st_sop0_p1,
	tx_st_valid0,
	txcompl0_ext,
	txcompl1_ext,
	txcompl2_ext,
	txcompl3_ext,
	txcompl4_ext,
	txcompl5_ext,
	txcompl6_ext,
	txcompl7_ext,
	txdata0_ext,
	txdata1_ext,
	txdata2_ext,
	txdata3_ext,
	txdata4_ext,
	txdata5_ext,
	txdata6_ext,
	txdata7_ext,
	txdatak0_ext,
	txdatak1_ext,
	txdatak2_ext,
	txdatak3_ext,
	txdatak4_ext,
	txdatak5_ext,
	txdatak6_ext,
	txdatak7_ext,
	txdetectrx0_ext,
	txdetectrx1_ext,
	txdetectrx2_ext,
	txdetectrx3_ext,
	txdetectrx4_ext,
	txdetectrx5_ext,
	txdetectrx6_ext,
	txdetectrx7_ext,
	txelecidle0_ext,
	txelecidle1_ext,
	txelecidle2_ext,
	txelecidle3_ext,
	txelecidle4_ext,
	txelecidle5_ext,
	txelecidle6_ext,
	txelecidle7_ext,
	TxsAddress_i,
	TxsBurstCount_i,
	TxsByteEnable_i,
	TxsChipSelect_i,
	TxsRead_i,
	TxsReadData_o,
	TxsReadDataValid_o,
	TxsWaitRequest_o,
	TxsWrite_i,
	TxsWriteData_i,
	use_pcie_reconfig,
	wake_oen) /* synthesis synthesis_clearbox=1 */;
	input   [4:0]  aer_msi_num;
	output   app_int_ack;
	input   app_int_sts;
	output   app_msi_ack;
	input   [4:0]  app_msi_num;
	input   app_msi_req;
	input   [2:0]  app_msi_tc;
	input   AvlClk_i;
	output   [15:0]  avs_pcie_reconfig_readdata;
	output   avs_pcie_reconfig_readdatavalid;
	output   avs_pcie_reconfig_waitrequest;
	input   core_clk_in;
	output   core_clk_out;
	input   [6:0]  cpl_err;
	input   cpl_pending;
	input   [11:0]  CraAddress_i;
	input   [3:0]  CraByteEnable_i;
	input   CraChipSelect_i;
	output   CraIrq_o;
	input   CraRead;
	output   [31:0]  CraReadData_o;
	output   CraWaitRequest_o;
	input   CraWrite;
	input   [31:0]  CraWriteData_i;
	input   crst;
	output   derr_cor_ext_rcv0;
	output   derr_cor_ext_rpl;
	output   derr_rpl;
	output   [4:0]  dl_ltssm;
	output   dlup_exit;
	output   [23:0]  eidle_infer_sel;
	output   ev_128ns;
	output   ev_1us;
	output   [1:0]  hip_extraclkout;
	output   hotrst_exit;
	input   [4:0]  hpg_ctrler;
	output   [3:0]  int_status;
	output   l2_exit;
	output   [3:0]  lane_act;
	output   lmi_ack;
	input   [11:0]  lmi_addr;
	input   [31:0]  lmi_din;
	output   [31:0]  lmi_dout;
	input   lmi_rden;
	input   lmi_wren;
	output   npd_alloc_1cred_vc0;
	output   npd_cred_vio_vc0;
	output   nph_alloc_1cred_vc0;
	output   nph_cred_vio_vc0;
	input   npor;
	input   pclk_central;
	input   pclk_ch0;
	input   [4:0]  pex_msi_num;
	input   phystatus0_ext;
	input   phystatus1_ext;
	input   phystatus2_ext;
	input   phystatus3_ext;
	input   phystatus4_ext;
	input   phystatus5_ext;
	input   phystatus6_ext;
	input   phystatus7_ext;
	input   pld_clk;
	input   pll_fixed_clk;
	input   pm_auxpwr;
	input   [9:0]  pm_data;
	input   pm_event;
	input   pme_to_cr;
	output   pme_to_sr;
	output   [1:0]  powerdown0_ext;
	output   [1:0]  powerdown1_ext;
	output   [1:0]  powerdown2_ext;
	output   [1:0]  powerdown3_ext;
	output   [1:0]  powerdown4_ext;
	output   [1:0]  powerdown5_ext;
	output   [1:0]  powerdown6_ext;
	output   [1:0]  powerdown7_ext;
	output   r2c_err0;
	output   rate_ext;
	input   rc_areset;
	output   rc_gxb_powerdown;
	input   rc_inclk_eq_125mhz;
	input   rc_pll_locked;
	output   rc_rx_analogreset;
	output   rc_rx_digitalreset;
	input   rc_rx_pll_locked_one;
	output   rc_tx_digitalreset;
	output   reset_status;
	input   Rstn_i;
	output   rx_fifo_empty0;
	output   rx_fifo_full0;
	output   [7:0]  rx_st_bardec0;
	output   [7:0]  rx_st_be0;
	output   [7:0]  rx_st_be0_p1;
	output   [63:0]  rx_st_data0;
	output   [63:0]  rx_st_data0_p1;
	output   rx_st_eop0;
	output   rx_st_eop0_p1;
	output   rx_st_err0;
	input   rx_st_mask0;
	input   rx_st_ready0;
	output   rx_st_sop0;
	output   rx_st_sop0_p1;
	output   rx_st_valid0;
	input   [7:0]  rxdata0_ext;
	input   [7:0]  rxdata1_ext;
	input   [7:0]  rxdata2_ext;
	input   [7:0]  rxdata3_ext;
	input   [7:0]  rxdata4_ext;
	input   [7:0]  rxdata5_ext;
	input   [7:0]  rxdata6_ext;
	input   [7:0]  rxdata7_ext;
	input   rxdatak0_ext;
	input   rxdatak1_ext;
	input   rxdatak2_ext;
	input   rxdatak3_ext;
	input   rxdatak4_ext;
	input   rxdatak5_ext;
	input   rxdatak6_ext;
	input   rxdatak7_ext;
	input   rxelecidle0_ext;
	input   rxelecidle1_ext;
	input   rxelecidle2_ext;
	input   rxelecidle3_ext;
	input   rxelecidle4_ext;
	input   rxelecidle5_ext;
	input   rxelecidle6_ext;
	input   rxelecidle7_ext;
	output   [31:0]  RxmAddress_o;
	output   [9:0]  RxmBurstCount_o;
	output   [7:0]  RxmByteEnable_o;
	input   RxmIrq_i;
	input   [5:0]  RxmIrqNum_i;
	output   RxmRead_o;
	input   [63:0]  RxmReadData_i;
	input   RxmReadDataValid_i;
	input   RxmWaitRequest_i;
	output   RxmWrite_o;
	output   [63:0]  RxmWriteData_o;
	output   rxpolarity0_ext;
	output   rxpolarity1_ext;
	output   rxpolarity2_ext;
	output   rxpolarity3_ext;
	output   rxpolarity4_ext;
	output   rxpolarity5_ext;
	output   rxpolarity6_ext;
	output   rxpolarity7_ext;
	input   [2:0]  rxstatus0_ext;
	input   [2:0]  rxstatus1_ext;
	input   [2:0]  rxstatus2_ext;
	input   [2:0]  rxstatus3_ext;
	input   [2:0]  rxstatus4_ext;
	input   [2:0]  rxstatus5_ext;
	input   [2:0]  rxstatus6_ext;
	input   [2:0]  rxstatus7_ext;
	input   rxvalid0_ext;
	input   rxvalid1_ext;
	input   rxvalid2_ext;
	input   rxvalid3_ext;
	input   rxvalid4_ext;
	input   rxvalid5_ext;
	input   rxvalid6_ext;
	input   rxvalid7_ext;
	output   serr_out;
	input   srst;
	output   suc_spd_neg;
	output   swdn_wake;
	output   swup_hotrst;
	input   [39:0]  test_in;
	output   [63:0]  test_out;
	output   [3:0]  tl_cfg_add;
	output   [31:0]  tl_cfg_ctl;
	output   tl_cfg_ctl_wr;
	output   [52:0]  tl_cfg_sts;
	output   tl_cfg_sts_wr;
	output   [35:0]  tx_cred0;
	output   [7:0]  tx_deemph;
	output   tx_fifo_empty0;
	output   tx_fifo_full0;
	output   [3:0]  tx_fifo_rdptr0;
	output   [3:0]  tx_fifo_wrptr0;
	output   [23:0]  tx_margin;
	input   [63:0]  tx_st_data0;
	input   [63:0]  tx_st_data0_p1;
	input   tx_st_eop0;
	input   tx_st_eop0_p1;
	input   tx_st_err0;
	output   tx_st_ready0;
	input   tx_st_sop0;
	input   tx_st_sop0_p1;
	input   tx_st_valid0;
	output   txcompl0_ext;
	output   txcompl1_ext;
	output   txcompl2_ext;
	output   txcompl3_ext;
	output   txcompl4_ext;
	output   txcompl5_ext;
	output   txcompl6_ext;
	output   txcompl7_ext;
	output   [7:0]  txdata0_ext;
	output   [7:0]  txdata1_ext;
	output   [7:0]  txdata2_ext;
	output   [7:0]  txdata3_ext;
	output   [7:0]  txdata4_ext;
	output   [7:0]  txdata5_ext;
	output   [7:0]  txdata6_ext;
	output   [7:0]  txdata7_ext;
	output   txdatak0_ext;
	output   txdatak1_ext;
	output   txdatak2_ext;
	output   txdatak3_ext;
	output   txdatak4_ext;
	output   txdatak5_ext;
	output   txdatak6_ext;
	output   txdatak7_ext;
	output   txdetectrx0_ext;
	output   txdetectrx1_ext;
	output   txdetectrx2_ext;
	output   txdetectrx3_ext;
	output   txdetectrx4_ext;
	output   txdetectrx5_ext;
	output   txdetectrx6_ext;
	output   txdetectrx7_ext;
	output   txelecidle0_ext;
	output   txelecidle1_ext;
	output   txelecidle2_ext;
	output   txelecidle3_ext;
	output   txelecidle4_ext;
	output   txelecidle5_ext;
	output   txelecidle6_ext;
	output   txelecidle7_ext;
	input   [16:0]  TxsAddress_i;
	input   [9:0]  TxsBurstCount_i;
	input   [7:0]  TxsByteEnable_i;
	input   TxsChipSelect_i;
	input   TxsRead_i;
	output   [63:0]  TxsReadData_o;
	output   TxsReadDataValid_o;
	output   TxsWaitRequest_o;
	input   TxsWrite_i;
	input   [63:0]  TxsWriteData_i;
	output   use_pcie_reconfig;
	output   wake_oen;

	reg	nlOl0Ol51;
	reg	nlOl0Ol52;
	reg	nlOl0OO49;
	reg	nlOl0OO50;
	reg	nlOli0l41;
	reg	nlOli0l42;
	reg	nlOli1i47;
	reg	nlOli1i48;
	reg	nlOli1l45;
	reg	nlOli1l46;
	reg	nlOli1O43;
	reg	nlOli1O44;
	reg	nlOliil39;
	reg	nlOliil40;
	reg	nlOliiO37;
	reg	nlOliiO38;
	reg	nlOlili35;
	reg	nlOlili36;
	reg	nlOlill33;
	reg	nlOlill34;
	reg	nlOlilO31;
	reg	nlOlilO32;
	reg	nlOliOi29;
	reg	nlOliOi30;
	reg	nlOliOl27;
	reg	nlOliOl28;
	reg	nlOll0l21;
	reg	nlOll0l22;
	reg	nlOll1i25;
	reg	nlOll1i26;
	reg	nlOll1O23;
	reg	nlOll1O24;
	reg	nlOllii19;
	reg	nlOllii20;
	reg	nlOllli17;
	reg	nlOllli18;
	reg	nlOlllO15;
	reg	nlOlllO16;
	reg	nlOlO0O11;
	reg	nlOlO0O12;
	reg	nlOlO1O13;
	reg	nlOlO1O14;
	reg	nlOlOil10;
	reg	nlOlOil9;
	reg	nlOlOll7;
	reg	nlOlOll8;
	reg	nlOlOOi5;
	reg	nlOlOOi6;
	reg	nlOlOOO3;
	reg	nlOlOOO4;
	reg	nlOO11O1;
	reg	nlOO11O2;
	reg	n100ll;
	reg	n1101O;
	reg	n100li_clk_prev;
	wire	wire_n100li_PRN;
	reg	n1101l;
	reg	n1110i;
	reg	n1110l;
	reg	n1110O;
	reg	n1111i;
	reg	n1111l;
	reg	n1111O;
	reg	n111ii;
	reg	n111il;
	reg	n111iO;
	reg	n111li;
	reg	n111ll;
	reg	n111lO;
	reg	n111Oi;
	reg	n111Ol;
	reg	n111OO;
	reg	nlOOlli;
	reg	nlOOlll;
	reg	nlOOllO;
	reg	nlOOlOi;
	reg	nlOOlOl;
	reg	nlOOlOO;
	reg	nlOOO0i;
	reg	nlOOO0l;
	reg	nlOOO0O;
	reg	nlOOOii;
	reg	nlOOOil;
	reg	nlOOOiO;
	reg	nlOOOli;
	reg	nlOOOll;
	reg	nlOOOlO;
	reg	nlOOOOi;
	reg	nlOOOOl;
	reg	nlOOOOO;
	reg	n1101i_clk_prev;
	wire	wire_n1101i_CLRN;
	wire	wire_n1101i_PRN;
	reg	n10iOl;
	reg	n10iOO;
	reg	n10l0i;
	reg	n10l0l;
	reg	n10l0O;
	reg	n10l1i;
	reg	n10l1l;
	reg	n10l1O;
	reg	n10lii;
	reg	n10lil;
	reg	n10liO;
	reg	n10lli;
	reg	n10lll;
	reg	n10llO;
	reg	n10lOi;
	reg	n10lOl;
	reg	n10lOO;
	reg	n10O0i;
	reg	n10O0l;
	reg	n10O0O;
	reg	n10O1i;
	reg	n10O1l;
	reg	n10O1O;
	reg	n10Oii;
	reg	n10Oil;
	reg	n10OiO;
	reg	n10Oli;
	reg	n10Oll;
	reg	n10OlO;
	reg	n10OOi;
	reg	n10OOl;
	reg	n10OOO;
	reg	n1i00i;
	reg	n1i00l;
	reg	n1i00O;
	reg	n1i01i;
	reg	n1i01l;
	reg	n1i01O;
	reg	n1i0ii;
	reg	n1i0il;
	reg	n1i0iO;
	reg	n1i0li;
	reg	n1i0ll;
	reg	n1i0lO;
	reg	n1i0Oi;
	reg	n1i0Ol;
	reg	n1i0OO;
	reg	n1i10i;
	reg	n1i10l;
	reg	n1i10O;
	reg	n1i11i;
	reg	n1i11l;
	reg	n1i11O;
	reg	n1i1ii;
	reg	n1i1il;
	reg	n1i1iO;
	reg	n1i1li;
	reg	n1i1ll;
	reg	n1i1lO;
	reg	n1i1Oi;
	reg	n1i1Ol;
	reg	n1i1OO;
	reg	n1ii0i;
	reg	n1ii0l;
	reg	n1ii0O;
	reg	n1ii1i;
	reg	n1ii1l;
	reg	n1ii1O;
	reg	n1iiii;
	reg	n1iiil;
	reg	n1iiiO;
	reg	n1iili;
	reg	n1iill;
	reg	n1iilO;
	reg	n1iiOi;
	reg	n1iiOl;
	reg	n1iiOO;
	reg	n1il0i;
	reg	n1il0l;
	reg	n1il0O;
	reg	n1il1i;
	reg	n1il1l;
	reg	n1il1O;
	reg	n1ilii;
	reg	n1ilil;
	reg	n1iliO;
	reg	n1illi;
	reg	n1illl;
	reg	n1illO;
	reg	n1ilOi;
	reg	n1ilOO;
	wire	wire_n1ilOl_CLRN;
	reg	n1iO0l;
	reg	n1iO1i;
	reg	n1iO1l;
	reg	n1iO1O;
	wire	wire_n1iO0i_CLRN;
	reg	nlOOO1i;
	reg	nlOOO1O;
	reg	nlOOO1l_clk_prev;
	wire	wire_nlOOO1l_CLRN;
	wire	wire_n0100i_dataout;
	wire	wire_n0100l_dataout;
	wire	wire_n0100O_dataout;
	wire	wire_n0101i_dataout;
	wire	wire_n0101l_dataout;
	wire	wire_n0101O_dataout;
	wire	wire_n0110i_dataout;
	wire	wire_n0110l_dataout;
	wire	wire_n0110O_dataout;
	wire	wire_n0111i_dataout;
	wire	wire_n0111l_dataout;
	wire	wire_n0111O_dataout;
	wire	wire_n011ii_dataout;
	wire	wire_n011il_dataout;
	wire	wire_n011iO_dataout;
	wire	wire_n011li_dataout;
	wire	wire_n011ll_dataout;
	wire	wire_n011lO_dataout;
	wire	wire_n011Oi_dataout;
	wire	wire_n011Ol_dataout;
	wire	wire_n011OO_dataout;
	wire	wire_n1000l_dataout;
	wire	wire_n1000O_dataout;
	wire	wire_n1001l_dataout;
	wire	wire_n1001O_dataout;
	wire	wire_n100ii_dataout;
	wire	wire_n100il_dataout;
	wire	wire_n100lO_dataout;
	wire	wire_n100Oi_dataout;
	wire	wire_n100OO_dataout;
	wire	wire_n1010l_dataout;
	wire	wire_n1010O_dataout;
	wire	wire_n1011i_dataout;
	wire	wire_n1011l_dataout;
	wire	wire_n1011O_dataout;
	wire	wire_n101ii_dataout;
	wire	wire_n101il_dataout;
	wire	wire_n101iO_dataout;
	wire	wire_n101li_dataout;
	wire	wire_n101ll_dataout;
	wire	wire_n101lO_dataout;
	wire	wire_n101Ol_dataout;
	wire	wire_n101OO_dataout;
	wire	wire_n10i1i_dataout;
	wire	wire_n1100i_dataout;
	wire	wire_n1100l_dataout;
	wire	wire_n1100O_dataout;
	wire	wire_n110ii_dataout;
	wire	wire_n110il_dataout;
	wire	wire_n110iO_dataout;
	wire	wire_n110li_dataout;
	wire	wire_n110ll_dataout;
	wire	wire_n110lO_dataout;
	wire	wire_n110Oi_dataout;
	wire	wire_n110Ol_dataout;
	wire	wire_n110OO_dataout;
	wire	wire_n11i0i_dataout;
	wire	wire_n11i0l_dataout;
	wire	wire_n11i0O_dataout;
	wire	wire_n11i1i_dataout;
	wire	wire_n11i1l_dataout;
	wire	wire_n11i1O_dataout;
	wire	wire_n11iii_dataout;
	wire	wire_n11iil_dataout;
	wire	wire_n11iiO_dataout;
	wire	wire_n11ili_dataout;
	wire	wire_n11ill_dataout;
	wire	wire_n11ilO_dataout;
	wire	wire_n11iOi_dataout;
	wire	wire_n11iOl_dataout;
	wire	wire_n11iOO_dataout;
	wire	wire_n11l0i_dataout;
	wire	wire_n11l0l_dataout;
	wire	wire_n11l0O_dataout;
	wire	wire_n11l1i_dataout;
	wire	wire_n11l1l_dataout;
	wire	wire_n11l1O_dataout;
	wire	wire_n11lii_dataout;
	wire	wire_n11lil_dataout;
	wire	wire_n11liO_dataout;
	wire	wire_n11lli_dataout;
	wire	wire_n11lll_dataout;
	wire	wire_n11llO_dataout;
	wire	wire_n11lOl_dataout;
	wire	wire_n11lOO_dataout;
	wire	wire_n11O1i_dataout;
	wire	wire_n11Oii_dataout;
	wire	wire_n11Oil_dataout;
	wire	wire_n11OiO_dataout;
	wire	wire_n11Oli_dataout;
	wire	wire_n11Oll_dataout;
	wire	wire_n11OlO_dataout;
	wire	wire_n11OOi_dataout;
	wire	wire_n11OOl_dataout;
	wire	wire_n11OOO_dataout;
	wire	wire_n1iO0O_dataout;
	wire	wire_n1iOii_dataout;
	wire	wire_n1iOil_dataout;
	wire	wire_n1iOiO_dataout;
	wire	wire_n1iOli_dataout;
	wire	wire_n1iOll_dataout;
	wire	wire_n1iOlO_dataout;
	wire	wire_n1iOOi_dataout;
	wire	wire_n1iOOl_dataout;
	wire	wire_n1iOOO_dataout;
	wire	wire_n1l00i_dataout;
	wire	wire_n1l00l_dataout;
	wire	wire_n1l00O_dataout;
	wire	wire_n1l01i_dataout;
	wire	wire_n1l01l_dataout;
	wire	wire_n1l01O_dataout;
	wire	wire_n1l0ii_dataout;
	wire	wire_n1l0il_dataout;
	wire	wire_n1l0iO_dataout;
	wire	wire_n1l0li_dataout;
	wire	wire_n1l0ll_dataout;
	wire	wire_n1l0lO_dataout;
	wire	wire_n1l0Oi_dataout;
	wire	wire_n1l0Ol_dataout;
	wire	wire_n1l0OO_dataout;
	wire	wire_n1l10i_dataout;
	wire	wire_n1l10l_dataout;
	wire	wire_n1l10O_dataout;
	wire	wire_n1l11i_dataout;
	wire	wire_n1l11l_dataout;
	wire	wire_n1l11O_dataout;
	wire	wire_n1l1ii_dataout;
	wire	wire_n1l1il_dataout;
	wire	wire_n1l1iO_dataout;
	wire	wire_n1l1li_dataout;
	wire	wire_n1l1ll_dataout;
	wire	wire_n1l1lO_dataout;
	wire	wire_n1l1Oi_dataout;
	wire	wire_n1l1Ol_dataout;
	wire	wire_n1l1OO_dataout;
	wire	wire_n1li0i_dataout;
	wire	wire_n1li0l_dataout;
	wire	wire_n1li0O_dataout;
	wire	wire_n1li1i_dataout;
	wire	wire_n1li1l_dataout;
	wire	wire_n1li1O_dataout;
	wire	wire_n1liii_dataout;
	wire	wire_n1liil_dataout;
	wire	wire_n1liiO_dataout;
	wire	wire_n1lili_dataout;
	wire	wire_n1lill_dataout;
	wire	wire_n1lilO_dataout;
	wire	wire_n1liOi_dataout;
	wire	wire_n1liOl_dataout;
	wire	wire_n1liOO_dataout;
	wire	wire_n1ll0i_dataout;
	wire	wire_n1ll0l_dataout;
	wire	wire_n1ll0O_dataout;
	wire	wire_n1ll1i_dataout;
	wire	wire_n1ll1l_dataout;
	wire	wire_n1ll1O_dataout;
	wire	wire_n1llii_dataout;
	wire	wire_n1llil_dataout;
	wire	wire_n1lliO_dataout;
	wire	wire_n1llli_dataout;
	wire	wire_n1llll_dataout;
	wire	wire_n1lllO_dataout;
	wire	wire_n1llOi_dataout;
	wire	wire_n1llOl_dataout;
	wire	wire_n1llOO_dataout;
	wire	wire_n1lO0i_dataout;
	wire	wire_n1lO0l_dataout;
	wire	wire_n1lO0O_dataout;
	wire	wire_n1lO1i_dataout;
	wire	wire_n1lO1l_dataout;
	wire	wire_n1lO1O_dataout;
	wire	wire_n1lOii_dataout;
	wire	wire_n1lOil_dataout;
	wire	wire_n1lOiO_dataout;
	wire	wire_n1lOli_dataout;
	wire	wire_n1lOll_dataout;
	wire	wire_n1lOlO_dataout;
	wire	wire_n1lOOi_dataout;
	wire	wire_n1lOOl_dataout;
	wire	wire_n1lOOO_dataout;
	wire	wire_n1O00i_dataout;
	wire	wire_n1O00l_dataout;
	wire	wire_n1O00O_dataout;
	wire	wire_n1O01i_dataout;
	wire	wire_n1O01l_dataout;
	wire	wire_n1O01O_dataout;
	wire	wire_n1O0ii_dataout;
	wire	wire_n1O0il_dataout;
	wire	wire_n1O0iO_dataout;
	wire	wire_n1O0li_dataout;
	wire	wire_n1O0ll_dataout;
	wire	wire_n1O0lO_dataout;
	wire	wire_n1O0Oi_dataout;
	wire	wire_n1O0Ol_dataout;
	wire	wire_n1O0OO_dataout;
	wire	wire_n1O10i_dataout;
	wire	wire_n1O10l_dataout;
	wire	wire_n1O10O_dataout;
	wire	wire_n1O11i_dataout;
	wire	wire_n1O11l_dataout;
	wire	wire_n1O11O_dataout;
	wire	wire_n1O1ii_dataout;
	wire	wire_n1O1il_dataout;
	wire	wire_n1O1iO_dataout;
	wire	wire_n1O1li_dataout;
	wire	wire_n1O1ll_dataout;
	wire	wire_n1O1lO_dataout;
	wire	wire_n1O1Oi_dataout;
	wire	wire_n1O1Ol_dataout;
	wire	wire_n1O1OO_dataout;
	wire	wire_n1Oi0i_dataout;
	wire	wire_n1Oi0l_dataout;
	wire	wire_n1Oi0O_dataout;
	wire	wire_n1Oi1i_dataout;
	wire	wire_n1Oi1l_dataout;
	wire	wire_n1Oi1O_dataout;
	wire	wire_n1Oiii_dataout;
	wire	wire_n1Oiil_dataout;
	wire	wire_n1OiiO_dataout;
	wire	wire_n1Oili_dataout;
	wire	wire_n1Oill_dataout;
	wire	wire_n1OilO_dataout;
	wire	wire_n1OiOl_dataout;
	wire	wire_n1OiOO_dataout;
	wire	wire_n1Ol0i_dataout;
	wire	wire_n1Ol0l_dataout;
	wire	wire_n1Ol0O_dataout;
	wire	wire_n1Ol1i_dataout;
	wire	wire_n1Ol1l_dataout;
	wire	wire_n1Ol1O_dataout;
	wire	wire_n1Olii_dataout;
	wire	wire_n1Olil_dataout;
	wire	wire_n1OliO_dataout;
	wire	wire_n1Olli_dataout;
	wire	wire_n1Olll_dataout;
	wire	wire_n1OllO_dataout;
	wire	wire_n1OlOi_dataout;
	wire	wire_n1OlOl_dataout;
	wire	wire_n1OlOO_dataout;
	wire	wire_n1OO0i_dataout;
	wire	wire_n1OO0l_dataout;
	wire	wire_n1OO0O_dataout;
	wire	wire_n1OO1i_dataout;
	wire	wire_n1OO1l_dataout;
	wire	wire_n1OO1O_dataout;
	wire	wire_n1OOii_dataout;
	wire	wire_n1OOil_dataout;
	wire	wire_n1OOiO_dataout;
	wire	wire_n1OOli_dataout;
	wire	wire_n1OOll_dataout;
	wire	wire_n1OOlO_dataout;
	wire	wire_n1OOOi_dataout;
	wire	wire_n1OOOl_dataout;
	wire	wire_n1OOOO_dataout;
	wire	wire_nlOO00i_dataout;
	wire	wire_nlOO00l_dataout;
	wire	wire_nlOO00O_dataout;
	wire	wire_nlOO01l_dataout;
	wire	wire_nlOO01O_dataout;
	wire	wire_nlOO0ii_dataout;
	wire	wire_nlOO0il_dataout;
	wire	wire_nlOO0iO_dataout;
	wire	wire_nlOO0li_dataout;
	wire	wire_nlOO0ll_dataout;
	wire	wire_nlOO0lO_dataout;
	wire	wire_nlOO0Oi_dataout;
	wire	wire_nlOO0Ol_dataout;
	wire	wire_nlOO0OO_dataout;
	wire	wire_nlOOi1i_dataout;
	wire	wire_nlOOi1l_dataout;
	wire	wire_nlOOiii_dataout;
	wire	wire_nlOOiil_dataout;
	wire	wire_nlOOiiO_dataout;
	wire	wire_nlOOili_dataout;
	wire	wire_nlOOill_dataout;
	wire	wire_nlOOilO_dataout;
	wire	wire_nlOOiOi_dataout;
	wire	wire_nlOOiOl_dataout;
	wire	wire_nlOOiOO_dataout;
	wire	wire_nlOOl1i_dataout;
	wire	wire_nlOOl1l_dataout;
	wire	wire_nlOOl1O_dataout;
	wire  [11:0]   wire_n1010i_o;
	wire  [7:0]   wire_n101Oi_o;
	wire  [11:0]   wire_nlOOi0l_o;
	wire  [4:0]   wire_nlOOi1O_o;
	wire  [4:0]   wire_nlOOl0i_o;
	wire  [7:0]   wire_nlOOl0O_o;
	wire  wire_n1000i_o;
	wire  wire_n1001i_o;
	wire  wire_n11lOi_o;
	wire  wire_n11O1l_o;
	wire  wire_nlOOi0i_o;
	wire  wire_nlOOl0l_o;
	wire  wire_nlOOlil_o;
	wire  wire_nlOOliO_o;
	wire  wire_n010il_coreclkout;
	wire  wire_n010il_derrcorextrcv0;
	wire  wire_n010il_derrcorextrpl;
	wire  wire_n010il_derrrpl;
	wire  [4:0]   wire_n010il_dlltssm;
	wire  wire_n010il_dlupexit;
	wire  [23:0]   wire_n010il_eidleinfersel;
	wire  wire_n010il_ev128ns;
	wire  wire_n010il_ev1us;
	wire  [1:0]   wire_n010il_extraclkout;
	wire  [14:0]   wire_n010il_extraout;
	wire  wire_n010il_gen2rate;
	wire  wire_n010il_hotrstexit;
	wire  [3:0]   wire_n010il_intstatus;
	wire  wire_n010il_l2exit;
	wire  [3:0]   wire_n010il_laneact;
	wire  wire_n010il_lmiack;
	wire  [31:0]   wire_n010il_lmidout;
	wire  [15:0]   wire_n010il_powerdown;
	wire  wire_n010il_resetstatus;
	wire  [7:0]   wire_n010il_rxbardecvc0;
	wire  [7:0]   wire_n010il_rxbevc00;
	wire  [7:0]   wire_n010il_rxbevc01;
	wire  [63:0]   wire_n010il_rxdatavc00;
	wire  [63:0]   wire_n010il_rxdatavc01;
	wire  wire_n010il_rxeopvc00;
	wire  wire_n010il_rxeopvc01;
	wire  wire_n010il_rxerrvc0;
	wire  wire_n010il_rxfifoemptyvc0;
	wire  wire_n010il_rxfifofullvc0;
	wire  [7:0]   wire_n010il_rxpolarity;
	wire  wire_n010il_rxsopvc00;
	wire  wire_n010il_rxsopvc01;
	wire  wire_n010il_rxvalidvc0;
	wire  wire_n010il_serrout;
	wire  wire_n010il_swdnwake;
	wire  wire_n010il_swuphotrst;
	wire  [63:0]   wire_n010il_testout;
	wire  wire_n010il_tlappintaack;
	wire  wire_n010il_tlappmsiack;
	wire  [3:0]   wire_n010il_tlcfgadd;
	wire  [31:0]   wire_n010il_tlcfgctl;
	wire  wire_n010il_tlcfgctlwr;
	wire  [52:0]   wire_n010il_tlcfgsts;
	wire  wire_n010il_tlcfgstswr;
	wire  wire_n010il_tlpmetosr;
	wire  [7:0]   wire_n010il_txcompl;
	wire  [35:0]   wire_n010il_txcredvc0;
	wire  [63:0]   wire_n010il_txdata;
	wire  [7:0]   wire_n010il_txdatak;
	wire  [7:0]   wire_n010il_txdeemph;
	wire  [7:0]   wire_n010il_txdetectrx;
	wire  [7:0]   wire_n010il_txelecidle;
	wire  wire_n010il_txfifoemptyvc0;
	wire  wire_n010il_txfifofullvc0;
	wire  [3:0]   wire_n010il_txfifordpvc0;
	wire  [3:0]   wire_n010il_txfifowrpvc0;
	wire  [23:0]   wire_n010il_txmargin;
	wire  wire_n010il_txreadyvc0;
	wire  wire_n010il_wakeoen;
	wire  nlOl0lO;
	wire  nlOl0Oi;
	wire  nlOli0i;
	wire  nlOliii;
	wire  nlOll0O;
	wire  nlOll1l;
	wire  nlOlliO;
	wire  nlOllOl;
	wire  nlOllOO;
	wire  nlOlO0l;
	wire  nlOlO1i;
	wire  nlOlO1l;
	wire  nlOlOli;
	wire  nlOlOlO;
	wire  nlOlOOl;
	wire  nlOO11l;

	initial
		nlOl0Ol51 = 0;
	always @ ( posedge pld_clk)
		  nlOl0Ol51 <= nlOl0Ol52;
	event nlOl0Ol51_event;
	initial
		#1 ->nlOl0Ol51_event;
	always @(nlOl0Ol51_event)
		nlOl0Ol51 <= {1{1'b1}};
	initial
		nlOl0Ol52 = 0;
	always @ ( posedge pld_clk)
		  nlOl0Ol52 <= nlOl0Ol51;
	initial
		nlOl0OO49 = 0;
	always @ ( posedge pld_clk)
		  nlOl0OO49 <= nlOl0OO50;
	event nlOl0OO49_event;
	initial
		#1 ->nlOl0OO49_event;
	always @(nlOl0OO49_event)
		nlOl0OO49 <= {1{1'b1}};
	initial
		nlOl0OO50 = 0;
	always @ ( posedge pld_clk)
		  nlOl0OO50 <= nlOl0OO49;
	initial
		nlOli0l41 = 0;
	always @ ( posedge pld_clk)
		  nlOli0l41 <= nlOli0l42;
	event nlOli0l41_event;
	initial
		#1 ->nlOli0l41_event;
	always @(nlOli0l41_event)
		nlOli0l41 <= {1{1'b1}};
	initial
		nlOli0l42 = 0;
	always @ ( posedge pld_clk)
		  nlOli0l42 <= nlOli0l41;
	initial
		nlOli1i47 = 0;
	always @ ( posedge pld_clk)
		  nlOli1i47 <= nlOli1i48;
	event nlOli1i47_event;
	initial
		#1 ->nlOli1i47_event;
	always @(nlOli1i47_event)
		nlOli1i47 <= {1{1'b1}};
	initial
		nlOli1i48 = 0;
	always @ ( posedge pld_clk)
		  nlOli1i48 <= nlOli1i47;
	initial
		nlOli1l45 = 0;
	always @ ( posedge pld_clk)
		  nlOli1l45 <= nlOli1l46;
	event nlOli1l45_event;
	initial
		#1 ->nlOli1l45_event;
	always @(nlOli1l45_event)
		nlOli1l45 <= {1{1'b1}};
	initial
		nlOli1l46 = 0;
	always @ ( posedge pld_clk)
		  nlOli1l46 <= nlOli1l45;
	initial
		nlOli1O43 = 0;
	always @ ( posedge pld_clk)
		  nlOli1O43 <= nlOli1O44;
	event nlOli1O43_event;
	initial
		#1 ->nlOli1O43_event;
	always @(nlOli1O43_event)
		nlOli1O43 <= {1{1'b1}};
	initial
		nlOli1O44 = 0;
	always @ ( posedge pld_clk)
		  nlOli1O44 <= nlOli1O43;
	initial
		nlOliil39 = 0;
	always @ ( posedge pld_clk)
		  nlOliil39 <= nlOliil40;
	event nlOliil39_event;
	initial
		#1 ->nlOliil39_event;
	always @(nlOliil39_event)
		nlOliil39 <= {1{1'b1}};
	initial
		nlOliil40 = 0;
	always @ ( posedge pld_clk)
		  nlOliil40 <= nlOliil39;
	initial
		nlOliiO37 = 0;
	always @ ( posedge pld_clk)
		  nlOliiO37 <= nlOliiO38;
	event nlOliiO37_event;
	initial
		#1 ->nlOliiO37_event;
	always @(nlOliiO37_event)
		nlOliiO37 <= {1{1'b1}};
	initial
		nlOliiO38 = 0;
	always @ ( posedge pld_clk)
		  nlOliiO38 <= nlOliiO37;
	initial
		nlOlili35 = 0;
	always @ ( posedge pld_clk)
		  nlOlili35 <= nlOlili36;
	event nlOlili35_event;
	initial
		#1 ->nlOlili35_event;
	always @(nlOlili35_event)
		nlOlili35 <= {1{1'b1}};
	initial
		nlOlili36 = 0;
	always @ ( posedge pld_clk)
		  nlOlili36 <= nlOlili35;
	initial
		nlOlill33 = 0;
	always @ ( posedge pld_clk)
		  nlOlill33 <= nlOlill34;
	event nlOlill33_event;
	initial
		#1 ->nlOlill33_event;
	always @(nlOlill33_event)
		nlOlill33 <= {1{1'b1}};
	initial
		nlOlill34 = 0;
	always @ ( posedge pld_clk)
		  nlOlill34 <= nlOlill33;
	initial
		nlOlilO31 = 0;
	always @ ( posedge pld_clk)
		  nlOlilO31 <= nlOlilO32;
	event nlOlilO31_event;
	initial
		#1 ->nlOlilO31_event;
	always @(nlOlilO31_event)
		nlOlilO31 <= {1{1'b1}};
	initial
		nlOlilO32 = 0;
	always @ ( posedge pld_clk)
		  nlOlilO32 <= nlOlilO31;
	initial
		nlOliOi29 = 0;
	always @ ( posedge pld_clk)
		  nlOliOi29 <= nlOliOi30;
	event nlOliOi29_event;
	initial
		#1 ->nlOliOi29_event;
	always @(nlOliOi29_event)
		nlOliOi29 <= {1{1'b1}};
	initial
		nlOliOi30 = 0;
	always @ ( posedge pld_clk)
		  nlOliOi30 <= nlOliOi29;
	initial
		nlOliOl27 = 0;
	always @ ( posedge pld_clk)
		  nlOliOl27 <= nlOliOl28;
	event nlOliOl27_event;
	initial
		#1 ->nlOliOl27_event;
	always @(nlOliOl27_event)
		nlOliOl27 <= {1{1'b1}};
	initial
		nlOliOl28 = 0;
	always @ ( posedge pld_clk)
		  nlOliOl28 <= nlOliOl27;
	initial
		nlOll0l21 = 0;
	always @ ( posedge pld_clk)
		  nlOll0l21 <= nlOll0l22;
	event nlOll0l21_event;
	initial
		#1 ->nlOll0l21_event;
	always @(nlOll0l21_event)
		nlOll0l21 <= {1{1'b1}};
	initial
		nlOll0l22 = 0;
	always @ ( posedge pld_clk)
		  nlOll0l22 <= nlOll0l21;
	initial
		nlOll1i25 = 0;
	always @ ( posedge pld_clk)
		  nlOll1i25 <= nlOll1i26;
	event nlOll1i25_event;
	initial
		#1 ->nlOll1i25_event;
	always @(nlOll1i25_event)
		nlOll1i25 <= {1{1'b1}};
	initial
		nlOll1i26 = 0;
	always @ ( posedge pld_clk)
		  nlOll1i26 <= nlOll1i25;
	initial
		nlOll1O23 = 0;
	always @ ( posedge pld_clk)
		  nlOll1O23 <= nlOll1O24;
	event nlOll1O23_event;
	initial
		#1 ->nlOll1O23_event;
	always @(nlOll1O23_event)
		nlOll1O23 <= {1{1'b1}};
	initial
		nlOll1O24 = 0;
	always @ ( posedge pld_clk)
		  nlOll1O24 <= nlOll1O23;
	initial
		nlOllii19 = 0;
	always @ ( posedge pld_clk)
		  nlOllii19 <= nlOllii20;
	event nlOllii19_event;
	initial
		#1 ->nlOllii19_event;
	always @(nlOllii19_event)
		nlOllii19 <= {1{1'b1}};
	initial
		nlOllii20 = 0;
	always @ ( posedge pld_clk)
		  nlOllii20 <= nlOllii19;
	initial
		nlOllli17 = 0;
	always @ ( posedge pld_clk)
		  nlOllli17 <= nlOllli18;
	event nlOllli17_event;
	initial
		#1 ->nlOllli17_event;
	always @(nlOllli17_event)
		nlOllli17 <= {1{1'b1}};
	initial
		nlOllli18 = 0;
	always @ ( posedge pld_clk)
		  nlOllli18 <= nlOllli17;
	initial
		nlOlllO15 = 0;
	always @ ( posedge pld_clk)
		  nlOlllO15 <= nlOlllO16;
	event nlOlllO15_event;
	initial
		#1 ->nlOlllO15_event;
	always @(nlOlllO15_event)
		nlOlllO15 <= {1{1'b1}};
	initial
		nlOlllO16 = 0;
	always @ ( posedge pld_clk)
		  nlOlllO16 <= nlOlllO15;
	initial
		nlOlO0O11 = 0;
	always @ ( posedge pld_clk)
		  nlOlO0O11 <= nlOlO0O12;
	event nlOlO0O11_event;
	initial
		#1 ->nlOlO0O11_event;
	always @(nlOlO0O11_event)
		nlOlO0O11 <= {1{1'b1}};
	initial
		nlOlO0O12 = 0;
	always @ ( posedge pld_clk)
		  nlOlO0O12 <= nlOlO0O11;
	initial
		nlOlO1O13 = 0;
	always @ ( posedge pld_clk)
		  nlOlO1O13 <= nlOlO1O14;
	event nlOlO1O13_event;
	initial
		#1 ->nlOlO1O13_event;
	always @(nlOlO1O13_event)
		nlOlO1O13 <= {1{1'b1}};
	initial
		nlOlO1O14 = 0;
	always @ ( posedge pld_clk)
		  nlOlO1O14 <= nlOlO1O13;
	initial
		nlOlOil10 = 0;
	always @ ( posedge pld_clk)
		  nlOlOil10 <= nlOlOil9;
	initial
		nlOlOil9 = 0;
	always @ ( posedge pld_clk)
		  nlOlOil9 <= nlOlOil10;
	event nlOlOil9_event;
	initial
		#1 ->nlOlOil9_event;
	always @(nlOlOil9_event)
		nlOlOil9 <= {1{1'b1}};
	initial
		nlOlOll7 = 0;
	always @ ( posedge pld_clk)
		  nlOlOll7 <= nlOlOll8;
	event nlOlOll7_event;
	initial
		#1 ->nlOlOll7_event;
	always @(nlOlOll7_event)
		nlOlOll7 <= {1{1'b1}};
	initial
		nlOlOll8 = 0;
	always @ ( posedge pld_clk)
		  nlOlOll8 <= nlOlOll7;
	initial
		nlOlOOi5 = 0;
	always @ ( posedge pld_clk)
		  nlOlOOi5 <= nlOlOOi6;
	event nlOlOOi5_event;
	initial
		#1 ->nlOlOOi5_event;
	always @(nlOlOOi5_event)
		nlOlOOi5 <= {1{1'b1}};
	initial
		nlOlOOi6 = 0;
	always @ ( posedge pld_clk)
		  nlOlOOi6 <= nlOlOOi5;
	initial
		nlOlOOO3 = 0;
	always @ ( posedge pld_clk)
		  nlOlOOO3 <= nlOlOOO4;
	event nlOlOOO3_event;
	initial
		#1 ->nlOlOOO3_event;
	always @(nlOlOOO3_event)
		nlOlOOO3 <= {1{1'b1}};
	initial
		nlOlOOO4 = 0;
	always @ ( posedge pld_clk)
		  nlOlOOO4 <= nlOlOOO3;
	initial
		nlOO11O1 = 0;
	always @ ( posedge pld_clk)
		  nlOO11O1 <= nlOO11O2;
	event nlOO11O1_event;
	initial
		#1 ->nlOO11O1_event;
	always @(nlOO11O1_event)
		nlOO11O1 <= {1{1'b1}};
	initial
		nlOO11O2 = 0;
	always @ ( posedge pld_clk)
		  nlOO11O2 <= nlOO11O1;
	initial
	begin
		n100ll = 0;
		n1101O = 0;
	end
	always @ (pld_clk or wire_n100li_PRN or npor)
	begin
		if (wire_n100li_PRN == 1'b0) 
		begin
			n100ll <= 1;
			n1101O <= 1;
		end
		else if  (npor == 1'b0) 
		begin
			n100ll <= 0;
			n1101O <= 0;
		end
		else 
		if (pld_clk != n100li_clk_prev && pld_clk == 1'b1) 
		begin
			n100ll <= nlOlOlO;
			n1101O <= n100ll;
		end
		n100li_clk_prev <= pld_clk;
	end
	assign
		wire_n100li_PRN = (nlOll0l22 ^ nlOll0l21);
	event n100ll_event;
	event n1101O_event;
	initial
		#1 ->n100ll_event;
	initial
		#1 ->n1101O_event;
	always @(n100ll_event)
		n100ll <= 1;
	always @(n1101O_event)
		n1101O <= 1;
	initial
	begin
		n1101l = 0;
		n1110i = 0;
		n1110l = 0;
		n1110O = 0;
		n1111i = 0;
		n1111l = 0;
		n1111O = 0;
		n111ii = 0;
		n111il = 0;
		n111iO = 0;
		n111li = 0;
		n111ll = 0;
		n111lO = 0;
		n111Oi = 0;
		n111Ol = 0;
		n111OO = 0;
		nlOOlli = 0;
		nlOOlll = 0;
		nlOOllO = 0;
		nlOOlOi = 0;
		nlOOlOl = 0;
		nlOOlOO = 0;
		nlOOO0i = 0;
		nlOOO0l = 0;
		nlOOO0O = 0;
		nlOOOii = 0;
		nlOOOil = 0;
		nlOOOiO = 0;
		nlOOOli = 0;
		nlOOOll = 0;
		nlOOOlO = 0;
		nlOOOOi = 0;
		nlOOOOl = 0;
		nlOOOOO = 0;
	end
	always @ (pld_clk or wire_n1101i_PRN or wire_n1101i_CLRN)
	begin
		if (wire_n1101i_PRN == 1'b0) 
		begin
			n1101l <= 1;
			n1110i <= 1;
			n1110l <= 1;
			n1110O <= 1;
			n1111i <= 1;
			n1111l <= 1;
			n1111O <= 1;
			n111ii <= 1;
			n111il <= 1;
			n111iO <= 1;
			n111li <= 1;
			n111ll <= 1;
			n111lO <= 1;
			n111Oi <= 1;
			n111Ol <= 1;
			n111OO <= 1;
			nlOOlli <= 1;
			nlOOlll <= 1;
			nlOOllO <= 1;
			nlOOlOi <= 1;
			nlOOlOl <= 1;
			nlOOlOO <= 1;
			nlOOO0i <= 1;
			nlOOO0l <= 1;
			nlOOO0O <= 1;
			nlOOOii <= 1;
			nlOOOil <= 1;
			nlOOOiO <= 1;
			nlOOOli <= 1;
			nlOOOll <= 1;
			nlOOOlO <= 1;
			nlOOOOi <= 1;
			nlOOOOl <= 1;
			nlOOOOO <= 1;
		end
		else if  (wire_n1101i_CLRN == 1'b0) 
		begin
			n1101l <= 0;
			n1110i <= 0;
			n1110l <= 0;
			n1110O <= 0;
			n1111i <= 0;
			n1111l <= 0;
			n1111O <= 0;
			n111ii <= 0;
			n111il <= 0;
			n111iO <= 0;
			n111li <= 0;
			n111ll <= 0;
			n111lO <= 0;
			n111Oi <= 0;
			n111Ol <= 0;
			n111OO <= 0;
			nlOOlli <= 0;
			nlOOlll <= 0;
			nlOOllO <= 0;
			nlOOlOi <= 0;
			nlOOlOl <= 0;
			nlOOlOO <= 0;
			nlOOO0i <= 0;
			nlOOO0l <= 0;
			nlOOO0O <= 0;
			nlOOOii <= 0;
			nlOOOil <= 0;
			nlOOOiO <= 0;
			nlOOOli <= 0;
			nlOOOll <= 0;
			nlOOOlO <= 0;
			nlOOOOi <= 0;
			nlOOOOl <= 0;
			nlOOOOO <= 0;
		end
		else 
		if (pld_clk != n1101i_clk_prev && pld_clk == 1'b1) 
		begin
			n1101l <= wire_n11liO_dataout;
			n1110i <= wire_n11ilO_dataout;
			n1110l <= wire_n11iOi_dataout;
			n1110O <= wire_n11iOl_dataout;
			n1111i <= wire_n11iiO_dataout;
			n1111l <= wire_n11ili_dataout;
			n1111O <= wire_n11ill_dataout;
			n111ii <= wire_n11iOO_dataout;
			n111il <= wire_n11l1i_dataout;
			n111iO <= wire_n11l1l_dataout;
			n111li <= wire_n11l1O_dataout;
			n111ll <= wire_n11l0i_dataout;
			n111lO <= wire_n11l0l_dataout;
			n111Oi <= wire_n11l0O_dataout;
			n111Ol <= wire_n11lii_dataout;
			n111OO <= wire_n11lil_dataout;
			nlOOlli <= wire_n1100l_dataout;
			nlOOlll <= wire_n1100O_dataout;
			nlOOllO <= wire_n1100i_dataout;
			nlOOlOi <= wire_n110ii_dataout;
			nlOOlOl <= wire_n110il_dataout;
			nlOOlOO <= wire_n110iO_dataout;
			nlOOO0i <= wire_n110lO_dataout;
			nlOOO0l <= wire_n110Oi_dataout;
			nlOOO0O <= wire_n110Ol_dataout;
			nlOOOii <= wire_n110OO_dataout;
			nlOOOil <= wire_n11i1i_dataout;
			nlOOOiO <= wire_n11i1l_dataout;
			nlOOOli <= wire_n11i1O_dataout;
			nlOOOll <= wire_n11i0i_dataout;
			nlOOOlO <= wire_n11i0l_dataout;
			nlOOOOi <= wire_n11i0O_dataout;
			nlOOOOl <= wire_n11iii_dataout;
			nlOOOOO <= wire_n11iil_dataout;
		end
		n1101i_clk_prev <= pld_clk;
	end
	assign
		wire_n1101i_CLRN = ((nlOli1O44 ^ nlOli1O43) & n1101O),
		wire_n1101i_PRN = (nlOli1l46 ^ nlOli1l45);
	initial
	begin
		n10iOl = 0;
		n10iOO = 0;
		n10l0i = 0;
		n10l0l = 0;
		n10l0O = 0;
		n10l1i = 0;
		n10l1l = 0;
		n10l1O = 0;
		n10lii = 0;
		n10lil = 0;
		n10liO = 0;
		n10lli = 0;
		n10lll = 0;
		n10llO = 0;
		n10lOi = 0;
		n10lOl = 0;
		n10lOO = 0;
		n10O0i = 0;
		n10O0l = 0;
		n10O0O = 0;
		n10O1i = 0;
		n10O1l = 0;
		n10O1O = 0;
		n10Oii = 0;
		n10Oil = 0;
		n10OiO = 0;
		n10Oli = 0;
		n10Oll = 0;
		n10OlO = 0;
		n10OOi = 0;
		n10OOl = 0;
		n10OOO = 0;
		n1i00i = 0;
		n1i00l = 0;
		n1i00O = 0;
		n1i01i = 0;
		n1i01l = 0;
		n1i01O = 0;
		n1i0ii = 0;
		n1i0il = 0;
		n1i0iO = 0;
		n1i0li = 0;
		n1i0ll = 0;
		n1i0lO = 0;
		n1i0Oi = 0;
		n1i0Ol = 0;
		n1i0OO = 0;
		n1i10i = 0;
		n1i10l = 0;
		n1i10O = 0;
		n1i11i = 0;
		n1i11l = 0;
		n1i11O = 0;
		n1i1ii = 0;
		n1i1il = 0;
		n1i1iO = 0;
		n1i1li = 0;
		n1i1ll = 0;
		n1i1lO = 0;
		n1i1Oi = 0;
		n1i1Ol = 0;
		n1i1OO = 0;
		n1ii0i = 0;
		n1ii0l = 0;
		n1ii0O = 0;
		n1ii1i = 0;
		n1ii1l = 0;
		n1ii1O = 0;
		n1iiii = 0;
		n1iiil = 0;
		n1iiiO = 0;
		n1iili = 0;
		n1iill = 0;
		n1iilO = 0;
		n1iiOi = 0;
		n1iiOl = 0;
		n1iiOO = 0;
		n1il0i = 0;
		n1il0l = 0;
		n1il0O = 0;
		n1il1i = 0;
		n1il1l = 0;
		n1il1O = 0;
		n1ilii = 0;
		n1ilil = 0;
		n1iliO = 0;
		n1illi = 0;
		n1illl = 0;
		n1illO = 0;
		n1ilOi = 0;
		n1ilOO = 0;
	end
	always @ ( posedge pld_clk or  negedge wire_n1ilOl_CLRN)
	begin
		if (wire_n1ilOl_CLRN == 1'b0) 
		begin
			n10iOl <= 0;
			n10iOO <= 0;
			n10l0i <= 0;
			n10l0l <= 0;
			n10l0O <= 0;
			n10l1i <= 0;
			n10l1l <= 0;
			n10l1O <= 0;
			n10lii <= 0;
			n10lil <= 0;
			n10liO <= 0;
			n10lli <= 0;
			n10lll <= 0;
			n10llO <= 0;
			n10lOi <= 0;
			n10lOl <= 0;
			n10lOO <= 0;
			n10O0i <= 0;
			n10O0l <= 0;
			n10O0O <= 0;
			n10O1i <= 0;
			n10O1l <= 0;
			n10O1O <= 0;
			n10Oii <= 0;
			n10Oil <= 0;
			n10OiO <= 0;
			n10Oli <= 0;
			n10Oll <= 0;
			n10OlO <= 0;
			n10OOi <= 0;
			n10OOl <= 0;
			n10OOO <= 0;
			n1i00i <= 0;
			n1i00l <= 0;
			n1i00O <= 0;
			n1i01i <= 0;
			n1i01l <= 0;
			n1i01O <= 0;
			n1i0ii <= 0;
			n1i0il <= 0;
			n1i0iO <= 0;
			n1i0li <= 0;
			n1i0ll <= 0;
			n1i0lO <= 0;
			n1i0Oi <= 0;
			n1i0Ol <= 0;
			n1i0OO <= 0;
			n1i10i <= 0;
			n1i10l <= 0;
			n1i10O <= 0;
			n1i11i <= 0;
			n1i11l <= 0;
			n1i11O <= 0;
			n1i1ii <= 0;
			n1i1il <= 0;
			n1i1iO <= 0;
			n1i1li <= 0;
			n1i1ll <= 0;
			n1i1lO <= 0;
			n1i1Oi <= 0;
			n1i1Ol <= 0;
			n1i1OO <= 0;
			n1ii0i <= 0;
			n1ii0l <= 0;
			n1ii0O <= 0;
			n1ii1i <= 0;
			n1ii1l <= 0;
			n1ii1O <= 0;
			n1iiii <= 0;
			n1iiil <= 0;
			n1iiiO <= 0;
			n1iili <= 0;
			n1iill <= 0;
			n1iilO <= 0;
			n1iiOi <= 0;
			n1iiOl <= 0;
			n1iiOO <= 0;
			n1il0i <= 0;
			n1il0l <= 0;
			n1il0O <= 0;
			n1il1i <= 0;
			n1il1l <= 0;
			n1il1O <= 0;
			n1ilii <= 0;
			n1ilil <= 0;
			n1iliO <= 0;
			n1illi <= 0;
			n1illl <= 0;
			n1illO <= 0;
			n1ilOi <= 0;
			n1ilOO <= 0;
		end
		else 
		begin
			n10iOl <= wire_n1O10O_dataout;
			n10iOO <= wire_n1O10l_dataout;
			n10l0i <= wire_n1O11i_dataout;
			n10l0l <= wire_n1lOOO_dataout;
			n10l0O <= wire_n1lOOl_dataout;
			n10l1i <= wire_n1O10i_dataout;
			n10l1l <= wire_n1O11O_dataout;
			n10l1O <= wire_n1O11l_dataout;
			n10lii <= wire_n1lOOi_dataout;
			n10lil <= wire_n1lOlO_dataout;
			n10liO <= wire_n1lOll_dataout;
			n10lli <= wire_n1lOli_dataout;
			n10lll <= wire_n1lOiO_dataout;
			n10llO <= wire_n1lOil_dataout;
			n10lOi <= wire_n1lOii_dataout;
			n10lOl <= wire_n1lO0O_dataout;
			n10lOO <= wire_n1lO0l_dataout;
			n10O0i <= wire_n1lO1i_dataout;
			n10O0l <= wire_n1llOO_dataout;
			n10O0O <= wire_n1llOl_dataout;
			n10O1i <= wire_n1lO0i_dataout;
			n10O1l <= wire_n1lO1O_dataout;
			n10O1O <= wire_n1lO1l_dataout;
			n10Oii <= wire_n1llOi_dataout;
			n10Oil <= wire_n1lllO_dataout;
			n10OiO <= wire_n1llll_dataout;
			n10Oli <= wire_n1llli_dataout;
			n10Oll <= wire_n1lliO_dataout;
			n10OlO <= wire_n1llil_dataout;
			n10OOi <= wire_n1llii_dataout;
			n10OOl <= wire_n1ll0O_dataout;
			n10OOO <= wire_n1ll0l_dataout;
			n1i00i <= wire_n1li1i_dataout;
			n1i00l <= wire_n1l0OO_dataout;
			n1i00O <= wire_n1l0Ol_dataout;
			n1i01i <= wire_n1li0i_dataout;
			n1i01l <= wire_n1li1O_dataout;
			n1i01O <= wire_n1li1l_dataout;
			n1i0ii <= wire_n1l0Oi_dataout;
			n1i0il <= wire_n1l0lO_dataout;
			n1i0iO <= wire_n1l0ll_dataout;
			n1i0li <= wire_n1l0li_dataout;
			n1i0ll <= wire_n1l0iO_dataout;
			n1i0lO <= wire_n1l0il_dataout;
			n1i0Oi <= wire_n1l0ii_dataout;
			n1i0Ol <= wire_n1l00O_dataout;
			n1i0OO <= wire_n1l00l_dataout;
			n1i10i <= wire_n1ll1i_dataout;
			n1i10l <= wire_n1liOO_dataout;
			n1i10O <= wire_n1liOl_dataout;
			n1i11i <= wire_n1ll0i_dataout;
			n1i11l <= wire_n1ll1O_dataout;
			n1i11O <= wire_n1ll1l_dataout;
			n1i1ii <= wire_n1liOi_dataout;
			n1i1il <= wire_n1lilO_dataout;
			n1i1iO <= wire_n1lill_dataout;
			n1i1li <= wire_n1lili_dataout;
			n1i1ll <= wire_n1liiO_dataout;
			n1i1lO <= wire_n1liil_dataout;
			n1i1Oi <= wire_n1liii_dataout;
			n1i1Ol <= wire_n1li0O_dataout;
			n1i1OO <= wire_n1li0l_dataout;
			n1ii0i <= wire_n1l01i_dataout;
			n1ii0l <= wire_n1l1OO_dataout;
			n1ii0O <= wire_n1l1Ol_dataout;
			n1ii1i <= wire_n1l00i_dataout;
			n1ii1l <= wire_n1l01O_dataout;
			n1ii1O <= wire_n1l01l_dataout;
			n1iiii <= wire_n1l1Oi_dataout;
			n1iiil <= wire_n1l1lO_dataout;
			n1iiiO <= wire_n1l1ll_dataout;
			n1iili <= wire_n1l1li_dataout;
			n1iill <= wire_n1l1iO_dataout;
			n1iilO <= wire_n1l1il_dataout;
			n1iiOi <= wire_n1l1ii_dataout;
			n1iiOl <= wire_n1l10O_dataout;
			n1iiOO <= wire_n1l10l_dataout;
			n1il0i <= wire_n1l11i_dataout;
			n1il0l <= wire_n1iOOO_dataout;
			n1il0O <= wire_n1iOOl_dataout;
			n1il1i <= wire_n1l10i_dataout;
			n1il1l <= wire_n1l11O_dataout;
			n1il1O <= wire_n1l11l_dataout;
			n1ilii <= wire_n1iOOi_dataout;
			n1ilil <= wire_n1iOlO_dataout;
			n1iliO <= wire_n1iOll_dataout;
			n1illi <= wire_n1iOli_dataout;
			n1illl <= wire_n1iOiO_dataout;
			n1illO <= wire_n1iOil_dataout;
			n1ilOi <= wire_n1iOii_dataout;
			n1ilOO <= wire_n1iO0O_dataout;
		end
	end
	assign
		wire_n1ilOl_CLRN = (nlOlOll8 ^ nlOlOll7);
	initial
	begin
		n1iO0l = 0;
		n1iO1i = 0;
		n1iO1l = 0;
		n1iO1O = 0;
	end
	always @ ( posedge pld_clk or  negedge wire_n1iO0i_CLRN)
	begin
		if (wire_n1iO0i_CLRN == 1'b0) 
		begin
			n1iO0l <= 0;
			n1iO1i <= 0;
			n1iO1l <= 0;
			n1iO1O <= 0;
		end
		else if  (srst == 1'b0) 
		begin
			n1iO0l <= n1iO1O;
			n1iO1i <= wire_n010il_tlcfgstswr;
			n1iO1l <= n1iO1i;
			n1iO1O <= wire_n010il_tlcfgctlwr;
		end
	end
	assign
		wire_n1iO0i_CLRN = (nlOlOOi6 ^ nlOlOOi5);
	initial
	begin
		nlOOO1i = 0;
		nlOOO1O = 0;
	end
	always @ (pld_clk or n1101O or wire_nlOOO1l_CLRN)
	begin
		if (n1101O == 1'b0) 
		begin
			nlOOO1i <= 1;
			nlOOO1O <= 1;
		end
		else if  (wire_nlOOO1l_CLRN == 1'b0) 
		begin
			nlOOO1i <= 0;
			nlOOO1O <= 0;
		end
		else 
		if (pld_clk != nlOOO1l_clk_prev && pld_clk == 1'b1) 
		begin
			nlOOO1i <= wire_n110li_dataout;
			nlOOO1O <= wire_n110ll_dataout;
		end
		nlOOO1l_clk_prev <= pld_clk;
	end
	assign
		wire_nlOOO1l_CLRN = (nlOli1i48 ^ nlOli1i47);
	event nlOOO1i_event;
	event nlOOO1O_event;
	initial
		#1 ->nlOOO1i_event;
	initial
		#1 ->nlOOO1O_event;
	always @(nlOOO1i_event)
		nlOOO1i <= 1;
	always @(nlOOO1O_event)
		nlOOO1O <= 1;
	assign		wire_n0100i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[50] : n1i1il;
	assign		wire_n0100l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[51] : n1i1ii;
	assign		wire_n0100O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[52] : n1i10O;
	assign		wire_n0101i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[47] : n1i1ll;
	assign		wire_n0101l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[48] : n1i1li;
	assign		wire_n0101O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[49] : n1i1iO;
	assign		wire_n0110i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[35] : n1i0il;
	assign		wire_n0110l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[36] : n1i0ii;
	assign		wire_n0110O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[37] : n1i00O;
	assign		wire_n0111i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[32] : n1i0ll;
	assign		wire_n0111l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[33] : n1i0li;
	assign		wire_n0111O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[34] : n1i0iO;
	assign		wire_n011ii_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[38] : n1i00l;
	assign		wire_n011il_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[39] : n1i00i;
	assign		wire_n011iO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[40] : n1i01O;
	assign		wire_n011li_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[41] : n1i01l;
	assign		wire_n011ll_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[42] : n1i01i;
	assign		wire_n011lO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[43] : n1i1OO;
	assign		wire_n011Oi_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[44] : n1i1Ol;
	assign		wire_n011Ol_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[45] : n1i1Oi;
	assign		wire_n011OO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[46] : n1i1lO;
	and(wire_n1000l_dataout, wire_n100ii_dataout, ~(nlOll1l));
	and(wire_n1000O_dataout, wire_n100il_dataout, ~(nlOll1l));
	assign		wire_n1001l_dataout = (nlOOO1O === 1'b1) ? ((wire_n010il_txcredvc0[15] & (~ wire_n010il_txcredvc0[16])) & (~ wire_n010il_txcredvc0[17])) : nlOOlOO;
	and(wire_n1001O_dataout, (~ wire_n1000i_o), nlOOO1O);
	assign		wire_n100ii_dataout = (nlOlO1i === 1'b1) ? nlOll0O : nlOOllO;
	assign		wire_n100il_dataout = (nlOlO1i === 1'b1) ? nlOlO1l : nlOOlli;
	assign		wire_n100lO_dataout = (nlOllOl === 1'b1) ? nlOll0O : wire_n100Oi_dataout;
	and(wire_n100Oi_dataout, nlOOllO, nlOlliO);
	assign		wire_n100OO_dataout = (nlOllOl === 1'b1) ? nlOlO1l : wire_n10i1i_dataout;
	assign		wire_n1010l_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[0] : n1110l;
	assign		wire_n1010O_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[1] : n1110O;
	assign		wire_n1011i_dataout = (n1110i === 1'b1) ? wire_n1010i_o[9] : nlOOOOi;
	assign		wire_n1011l_dataout = (n1110i === 1'b1) ? wire_n1010i_o[10] : nlOOOOl;
	assign		wire_n1011O_dataout = (n1110i === 1'b1) ? wire_n1010i_o[11] : nlOOOOO;
	assign		wire_n101ii_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[2] : n111ii;
	assign		wire_n101il_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[3] : n111il;
	assign		wire_n101iO_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[4] : n111iO;
	assign		wire_n101li_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[5] : n111li;
	assign		wire_n101ll_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[6] : n111ll;
	assign		wire_n101lO_dataout = (n1101l === 1'b1) ? wire_n101Oi_o[7] : n111lO;
	assign		wire_n101Ol_dataout = (nlOOO1i === 1'b1) ? (((wire_n010il_txcredvc0[18] & (~ wire_n010il_txcredvc0[19])) & (~ wire_n010il_txcredvc0[20])) & (nlOliOl28 ^ nlOliOl27)) : nlOOlOl;
	and(wire_n101OO_dataout, (~ wire_n1001i_o), nlOOO1i);
	and(wire_n10i1i_dataout, nlOOlli, nlOlliO);
	and(wire_n1100i_dataout, wire_n1000l_dataout, ~(srst));
	and(wire_n1100l_dataout, wire_n1000O_dataout, ~(srst));
	and(wire_n1100O_dataout, ((wire_n100lO_dataout & nlOli0i) | nlOOlll), ~(srst));
	and(wire_n110ii_dataout, (((wire_n100OO_dataout & nlOliii) | nlOOlOi) | (~ (nlOli0l42 ^ nlOli0l41))), ~(srst));
	and(wire_n110il_dataout, wire_n101Ol_dataout, ~(srst));
	and(wire_n110iO_dataout, wire_n1001l_dataout, ~(srst));
	or(wire_n110li_dataout, wire_n101OO_dataout, srst);
	or(wire_n110ll_dataout, wire_n1001O_dataout, srst);
	and(wire_n110lO_dataout, wire_n11Oii_dataout, ~(srst));
	and(wire_n110Oi_dataout, wire_n11Oil_dataout, ~(srst));
	and(wire_n110Ol_dataout, wire_n11OiO_dataout, ~(srst));
	and(wire_n110OO_dataout, wire_n11Oli_dataout, ~(srst));
	and(wire_n11i0i_dataout, wire_n11OOl_dataout, ~(srst));
	and(wire_n11i0l_dataout, wire_n11OOO_dataout, ~(srst));
	and(wire_n11i0O_dataout, wire_n1011i_dataout, ~(srst));
	and(wire_n11i1i_dataout, wire_n11Oll_dataout, ~(srst));
	and(wire_n11i1l_dataout, wire_n11OlO_dataout, ~(srst));
	and(wire_n11i1O_dataout, wire_n11OOi_dataout, ~(srst));
	and(wire_n11iii_dataout, wire_n1011l_dataout, ~(srst));
	and(wire_n11iil_dataout, wire_n1011O_dataout, ~(srst));
	and(wire_n11iiO_dataout, wire_n11lli_dataout, ~(srst));
	and(wire_n11ili_dataout, wire_n11lll_dataout, ~(srst));
	and(wire_n11ill_dataout, wire_n11llO_dataout, ~(srst));
	and(wire_n11ilO_dataout, wire_n100lO_dataout, ~(srst));
	and(wire_n11iOi_dataout, wire_n1010l_dataout, ~(srst));
	and(wire_n11iOl_dataout, wire_n1010O_dataout, ~(srst));
	and(wire_n11iOO_dataout, wire_n101ii_dataout, ~(srst));
	and(wire_n11l0i_dataout, wire_n101ll_dataout, ~(srst));
	and(wire_n11l0l_dataout, wire_n101lO_dataout, ~(srst));
	and(wire_n11l0O_dataout, wire_n11lOl_dataout, ~(srst));
	and(wire_n11l1i_dataout, wire_n101il_dataout, ~(srst));
	and(wire_n11l1l_dataout, wire_n101iO_dataout, ~(srst));
	and(wire_n11l1O_dataout, wire_n101li_dataout, ~(srst));
	and(wire_n11lii_dataout, wire_n11lOO_dataout, ~(srst));
	and(wire_n11lil_dataout, wire_n11O1i_dataout, ~(srst));
	and(wire_n11liO_dataout, wire_n100OO_dataout, ~(srst));
	or(wire_n11lli_dataout, wire_nlOO01l_dataout, wire_n11lOi_o);
	or(wire_n11lll_dataout, wire_nlOO01O_dataout, wire_n11lOi_o);
	or(wire_n11llO_dataout, wire_nlOO00i_dataout, wire_n11lOi_o);
	or(wire_n11lOl_dataout, wire_nlOOiii_dataout, wire_n11O1l_o);
	or(wire_n11lOO_dataout, wire_nlOOiil_dataout, wire_n11O1l_o);
	or(wire_n11O1i_dataout, wire_nlOOiiO_dataout, wire_n11O1l_o);
	assign		wire_n11Oii_dataout = (n1110i === 1'b1) ? wire_n1010i_o[0] : nlOOO0i;
	assign		wire_n11Oil_dataout = (n1110i === 1'b1) ? wire_n1010i_o[1] : nlOOO0l;
	assign		wire_n11OiO_dataout = (n1110i === 1'b1) ? wire_n1010i_o[2] : nlOOO0O;
	assign		wire_n11Oli_dataout = (n1110i === 1'b1) ? wire_n1010i_o[3] : nlOOOii;
	assign		wire_n11Oll_dataout = (n1110i === 1'b1) ? wire_n1010i_o[4] : nlOOOil;
	assign		wire_n11OlO_dataout = (n1110i === 1'b1) ? wire_n1010i_o[5] : nlOOOiO;
	assign		wire_n11OOi_dataout = (n1110i === 1'b1) ? wire_n1010i_o[6] : nlOOOli;
	assign		wire_n11OOl_dataout = (n1110i === 1'b1) ? wire_n1010i_o[7] : nlOOOll;
	assign		wire_n11OOO_dataout = (n1110i === 1'b1) ? wire_n1010i_o[8] : nlOOOlO;
	and(wire_n1iO0O_dataout, n1iO1l, ~(srst));
	and(wire_n1iOii_dataout, wire_n1OiOl_dataout, ~(srst));
	and(wire_n1iOil_dataout, wire_n1OiOO_dataout, ~(srst));
	and(wire_n1iOiO_dataout, wire_n1Ol1i_dataout, ~(srst));
	and(wire_n1iOli_dataout, wire_n1Ol1l_dataout, ~(srst));
	and(wire_n1iOll_dataout, wire_n1Ol1O_dataout, ~(srst));
	and(wire_n1iOlO_dataout, wire_n1Ol0i_dataout, ~(srst));
	and(wire_n1iOOi_dataout, wire_n1Ol0l_dataout, ~(srst));
	and(wire_n1iOOl_dataout, wire_n1Ol0O_dataout, ~(srst));
	and(wire_n1iOOO_dataout, wire_n1Olii_dataout, ~(srst));
	and(wire_n1l00i_dataout, wire_n1OOll_dataout, ~(srst));
	and(wire_n1l00l_dataout, wire_n1OOlO_dataout, ~(srst));
	and(wire_n1l00O_dataout, wire_n1OOOi_dataout, ~(srst));
	and(wire_n1l01i_dataout, wire_n1OOil_dataout, ~(srst));
	and(wire_n1l01l_dataout, wire_n1OOiO_dataout, ~(srst));
	and(wire_n1l01O_dataout, wire_n1OOli_dataout, ~(srst));
	and(wire_n1l0ii_dataout, wire_n1OOOl_dataout, ~(srst));
	and(wire_n1l0il_dataout, wire_n1OOOO_dataout, ~(srst));
	and(wire_n1l0iO_dataout, wire_n0111i_dataout, ~(srst));
	and(wire_n1l0li_dataout, wire_n0111l_dataout, ~(srst));
	and(wire_n1l0ll_dataout, wire_n0111O_dataout, ~(srst));
	and(wire_n1l0lO_dataout, wire_n0110i_dataout, ~(srst));
	and(wire_n1l0Oi_dataout, wire_n0110l_dataout, ~(srst));
	and(wire_n1l0Ol_dataout, wire_n0110O_dataout, ~(srst));
	and(wire_n1l0OO_dataout, wire_n011ii_dataout, ~(srst));
	and(wire_n1l10i_dataout, wire_n1Olll_dataout, ~(srst));
	and(wire_n1l10l_dataout, wire_n1OllO_dataout, ~(srst));
	and(wire_n1l10O_dataout, wire_n1OlOi_dataout, ~(srst));
	and(wire_n1l11i_dataout, wire_n1Olil_dataout, ~(srst));
	and(wire_n1l11l_dataout, wire_n1OliO_dataout, ~(srst));
	and(wire_n1l11O_dataout, wire_n1Olli_dataout, ~(srst));
	and(wire_n1l1ii_dataout, wire_n1OlOl_dataout, ~(srst));
	and(wire_n1l1il_dataout, wire_n1OlOO_dataout, ~(srst));
	and(wire_n1l1iO_dataout, wire_n1OO1i_dataout, ~(srst));
	and(wire_n1l1li_dataout, wire_n1OO1l_dataout, ~(srst));
	and(wire_n1l1ll_dataout, wire_n1OO1O_dataout, ~(srst));
	and(wire_n1l1lO_dataout, wire_n1OO0i_dataout, ~(srst));
	and(wire_n1l1Oi_dataout, wire_n1OO0l_dataout, ~(srst));
	and(wire_n1l1Ol_dataout, wire_n1OO0O_dataout, ~(srst));
	and(wire_n1l1OO_dataout, wire_n1OOii_dataout, ~(srst));
	and(wire_n1li0i_dataout, wire_n011ll_dataout, ~(srst));
	and(wire_n1li0l_dataout, wire_n011lO_dataout, ~(srst));
	and(wire_n1li0O_dataout, wire_n011Oi_dataout, ~(srst));
	and(wire_n1li1i_dataout, wire_n011il_dataout, ~(srst));
	and(wire_n1li1l_dataout, wire_n011iO_dataout, ~(srst));
	and(wire_n1li1O_dataout, wire_n011li_dataout, ~(srst));
	and(wire_n1liii_dataout, wire_n011Ol_dataout, ~(srst));
	and(wire_n1liil_dataout, wire_n011OO_dataout, ~(srst));
	and(wire_n1liiO_dataout, wire_n0101i_dataout, ~(srst));
	and(wire_n1lili_dataout, wire_n0101l_dataout, ~(srst));
	and(wire_n1lill_dataout, wire_n0101O_dataout, ~(srst));
	and(wire_n1lilO_dataout, wire_n0100i_dataout, ~(srst));
	and(wire_n1liOi_dataout, wire_n0100l_dataout, ~(srst));
	and(wire_n1liOl_dataout, wire_n0100O_dataout, ~(srst));
	and(wire_n1liOO_dataout, n1iO0l, ~(srst));
	and(wire_n1ll0i_dataout, wire_n1O1li_dataout, ~(srst));
	and(wire_n1ll0l_dataout, wire_n1O1ll_dataout, ~(srst));
	and(wire_n1ll0O_dataout, wire_n1O1lO_dataout, ~(srst));
	and(wire_n1ll1i_dataout, wire_n1O1ii_dataout, ~(srst));
	and(wire_n1ll1l_dataout, wire_n1O1il_dataout, ~(srst));
	and(wire_n1ll1O_dataout, wire_n1O1iO_dataout, ~(srst));
	and(wire_n1llii_dataout, wire_n1O1Oi_dataout, ~(srst));
	and(wire_n1llil_dataout, wire_n1O1Ol_dataout, ~(srst));
	and(wire_n1lliO_dataout, wire_n1O1OO_dataout, ~(srst));
	and(wire_n1llli_dataout, wire_n1O01i_dataout, ~(srst));
	and(wire_n1llll_dataout, wire_n1O01l_dataout, ~(srst));
	and(wire_n1lllO_dataout, wire_n1O01O_dataout, ~(srst));
	and(wire_n1llOi_dataout, wire_n1O00i_dataout, ~(srst));
	and(wire_n1llOl_dataout, wire_n1O00l_dataout, ~(srst));
	and(wire_n1llOO_dataout, wire_n1O00O_dataout, ~(srst));
	and(wire_n1lO0i_dataout, wire_n1O0li_dataout, ~(srst));
	and(wire_n1lO0l_dataout, wire_n1O0ll_dataout, ~(srst));
	and(wire_n1lO0O_dataout, wire_n1O0lO_dataout, ~(srst));
	and(wire_n1lO1i_dataout, wire_n1O0ii_dataout, ~(srst));
	and(wire_n1lO1l_dataout, wire_n1O0il_dataout, ~(srst));
	and(wire_n1lO1O_dataout, wire_n1O0iO_dataout, ~(srst));
	and(wire_n1lOii_dataout, wire_n1O0Oi_dataout, ~(srst));
	and(wire_n1lOil_dataout, wire_n1O0Ol_dataout, ~(srst));
	and(wire_n1lOiO_dataout, wire_n1O0OO_dataout, ~(srst));
	and(wire_n1lOli_dataout, wire_n1Oi1i_dataout, ~(srst));
	and(wire_n1lOll_dataout, wire_n1Oi1l_dataout, ~(srst));
	and(wire_n1lOlO_dataout, wire_n1Oi1O_dataout, ~(srst));
	and(wire_n1lOOi_dataout, wire_n1Oi0i_dataout, ~(srst));
	and(wire_n1lOOl_dataout, wire_n1Oi0l_dataout, ~(srst));
	and(wire_n1lOOO_dataout, wire_n1Oi0O_dataout, ~(srst));
	assign		wire_n1O00i_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[12] : n10Oii;
	assign		wire_n1O00l_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[13] : n10O0O;
	assign		wire_n1O00O_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[14] : n10O0l;
	assign		wire_n1O01i_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[9] : n10Oli;
	assign		wire_n1O01l_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[10] : n10OiO;
	assign		wire_n1O01O_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[11] : n10Oil;
	assign		wire_n1O0ii_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[15] : n10O0i;
	assign		wire_n1O0il_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[16] : n10O1O;
	assign		wire_n1O0iO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[17] : n10O1l;
	assign		wire_n1O0li_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[18] : n10O1i;
	assign		wire_n1O0ll_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[19] : n10lOO;
	assign		wire_n1O0lO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[20] : n10lOl;
	assign		wire_n1O0Oi_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[21] : n10lOi;
	assign		wire_n1O0Ol_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[22] : n10llO;
	assign		wire_n1O0OO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[23] : n10lll;
	and(wire_n1O10i_dataout, wire_n1Oili_dataout, ~(srst));
	and(wire_n1O10l_dataout, wire_n1Oill_dataout, ~(srst));
	and(wire_n1O10O_dataout, wire_n1OilO_dataout, ~(srst));
	and(wire_n1O11i_dataout, wire_n1Oiii_dataout, ~(srst));
	and(wire_n1O11l_dataout, wire_n1Oiil_dataout, ~(srst));
	and(wire_n1O11O_dataout, wire_n1OiiO_dataout, ~(srst));
	assign		wire_n1O1ii_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[0] : n1i10i;
	assign		wire_n1O1il_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[1] : n1i11O;
	assign		wire_n1O1iO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[2] : n1i11l;
	assign		wire_n1O1li_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[3] : n1i11i;
	assign		wire_n1O1ll_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[4] : n10OOO;
	assign		wire_n1O1lO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[5] : n10OOl;
	assign		wire_n1O1Oi_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[6] : n10OOi;
	assign		wire_n1O1Ol_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[7] : n10OlO;
	assign		wire_n1O1OO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[8] : n10Oll;
	assign		wire_n1Oi0i_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[27] : n10lii;
	assign		wire_n1Oi0l_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[28] : n10l0O;
	assign		wire_n1Oi0O_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[29] : n10l0l;
	assign		wire_n1Oi1i_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[24] : n10lli;
	assign		wire_n1Oi1l_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[25] : n10liO;
	assign		wire_n1Oi1O_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[26] : n10lil;
	assign		wire_n1Oiii_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[30] : n10l0i;
	assign		wire_n1Oiil_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgctl[31] : n10l1O;
	assign		wire_n1OiiO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgadd[0] : n10l1l;
	assign		wire_n1Oili_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgadd[1] : n10l1i;
	assign		wire_n1Oill_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgadd[2] : n10iOO;
	assign		wire_n1OilO_dataout = (nlOlOOl === 1'b1) ? wire_n010il_tlcfgadd[3] : n10iOl;
	assign		wire_n1OiOl_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[0] : n1ilOi;
	assign		wire_n1OiOO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[1] : n1illO;
	assign		wire_n1Ol0i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[5] : n1ilil;
	assign		wire_n1Ol0l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[6] : n1ilii;
	assign		wire_n1Ol0O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[7] : n1il0O;
	assign		wire_n1Ol1i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[2] : n1illl;
	assign		wire_n1Ol1l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[3] : n1illi;
	assign		wire_n1Ol1O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[4] : n1iliO;
	assign		wire_n1Olii_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[8] : n1il0l;
	assign		wire_n1Olil_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[9] : n1il0i;
	assign		wire_n1OliO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[10] : n1il1O;
	assign		wire_n1Olli_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[11] : n1il1l;
	assign		wire_n1Olll_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[12] : n1il1i;
	assign		wire_n1OllO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[13] : n1iiOO;
	assign		wire_n1OlOi_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[14] : n1iiOl;
	assign		wire_n1OlOl_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[15] : n1iiOi;
	assign		wire_n1OlOO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[16] : n1iilO;
	assign		wire_n1OO0i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[20] : n1iiil;
	assign		wire_n1OO0l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[21] : n1iiii;
	assign		wire_n1OO0O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[22] : n1ii0O;
	assign		wire_n1OO1i_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[17] : n1iill;
	assign		wire_n1OO1l_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[18] : n1iili;
	assign		wire_n1OO1O_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[19] : n1iiiO;
	assign		wire_n1OOii_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[23] : n1ii0l;
	assign		wire_n1OOil_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[24] : n1ii0i;
	assign		wire_n1OOiO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[25] : n1ii1O;
	assign		wire_n1OOli_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[26] : n1ii1l;
	assign		wire_n1OOll_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[27] : n1ii1i;
	assign		wire_n1OOlO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[28] : n1i0OO;
	assign		wire_n1OOOi_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[29] : n1i0Ol;
	assign		wire_n1OOOl_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[30] : n1i0Oi;
	assign		wire_n1OOOO_dataout = (nlOO11l === 1'b1) ? wire_n010il_tlcfgsts[31] : n1i0lO;
	assign		wire_nlOO00i_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[2] : wire_nlOOi1i_dataout;
	assign		wire_nlOO00l_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[3] : wire_nlOOi1l_dataout;
	assign		wire_nlOO00O_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[4] : wire_nlOOi1l_dataout;
	assign		wire_nlOO01l_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[0] : wire_nlOO0Ol_dataout;
	assign		wire_nlOO01O_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[1] : wire_nlOO0OO_dataout;
	assign		wire_nlOO0ii_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[5] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0il_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[6] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0iO_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[7] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0li_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[8] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0ll_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[9] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0lO_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[10] : wire_nlOOi1l_dataout;
	assign		wire_nlOO0Oi_dataout = (nlOl0lO === 1'b1) ? wire_nlOOi0l_o[11] : wire_nlOOi1l_dataout;
	and(wire_nlOO0Ol_dataout, wire_nlOOi1O_o[1], wire_nlOOi0i_o);
	and(wire_nlOO0OO_dataout, wire_nlOOi1O_o[2], wire_nlOOi0i_o);
	and(wire_nlOOi1i_dataout, wire_nlOOi1O_o[3], wire_nlOOi0i_o);
	and(wire_nlOOi1l_dataout, wire_nlOOi1O_o[4], wire_nlOOi0i_o);
	assign		wire_nlOOiii_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[0] : wire_nlOOiOO_dataout;
	assign		wire_nlOOiil_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[1] : wire_nlOOl1i_dataout;
	assign		wire_nlOOiiO_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[2] : wire_nlOOl1l_dataout;
	assign		wire_nlOOili_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[3] : wire_nlOOl1O_dataout;
	assign		wire_nlOOill_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[4] : wire_nlOOl1O_dataout;
	assign		wire_nlOOilO_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[5] : wire_nlOOl1O_dataout;
	assign		wire_nlOOiOi_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[6] : wire_nlOOl1O_dataout;
	assign		wire_nlOOiOl_dataout = (nlOl0Oi === 1'b1) ? wire_nlOOl0O_o[7] : wire_nlOOl1O_dataout;
	and(wire_nlOOiOO_dataout, wire_nlOOl0i_o[1], wire_nlOOl0l_o);
	and(wire_nlOOl1i_dataout, wire_nlOOl0i_o[2], wire_nlOOl0l_o);
	and(wire_nlOOl1l_dataout, wire_nlOOl0i_o[3], wire_nlOOl0l_o);
	and(wire_nlOOl1O_dataout, wire_nlOOl0i_o[4], wire_nlOOl0l_o);
	oper_add   n1010i
	( 
	.a({((nlOlili36 ^ nlOlili35) & nlOOOOO), nlOOOOl, nlOOOOi, ((nlOlill34 ^ nlOlill33) & nlOOOlO), nlOOOll, nlOOOli, nlOOOiO, nlOOOil, nlOOOii, nlOOO0O, nlOOO0l, ((nlOlilO32 ^ nlOlilO31) & nlOOO0i)}),
	.b({{11{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n1010i_o));
	defparam
		n1010i.sgate_representation = 0,
		n1010i.width_a = 12,
		n1010i.width_b = 12,
		n1010i.width_o = 12;
	oper_add   n101Oi
	( 
	.a({n111lO, n111ll, ((nlOliOi30 ^ nlOliOi29) & n111li), n111iO, n111il, n111ii, n1110O, n1110l}),
	.b({{7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_n101Oi_o));
	defparam
		n101Oi.sgate_representation = 0,
		n101Oi.width_a = 8,
		n101Oi.width_b = 8,
		n101Oi.width_o = 8;
	oper_add   nlOOi0l
	( 
	.a({(~ nlOOOOO), (~ nlOOOOl), (~ nlOOOOi), (~ nlOOOlO), (~ nlOOOll), (~ nlOOOli), (~ nlOOOiO), (~ nlOOOil), (~ nlOOOii), (~ nlOOO0O), (~ nlOOO0l), (~ nlOOO0i)}),
	.b({{11{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOOi0l_o));
	defparam
		nlOOi0l.sgate_representation = 0,
		nlOOi0l.width_a = 12,
		nlOOi0l.width_b = 12,
		nlOOi0l.width_o = 12;
	oper_add   nlOOi1O
	( 
	.a({1'b0, wire_n010il_txcredvc0[20:18], 1'b1}),
	.b({{3{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOOi1O_o));
	defparam
		nlOOi1O.sgate_representation = 0,
		nlOOi1O.width_a = 5,
		nlOOi1O.width_b = 5,
		nlOOi1O.width_o = 5;
	oper_add   nlOOl0i
	( 
	.a({1'b0, wire_n010il_txcredvc0[17:15], 1'b1}),
	.b({{3{1'b1}}, 1'b0, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOOl0i_o));
	defparam
		nlOOl0i.sgate_representation = 0,
		nlOOl0i.width_a = 5,
		nlOOl0i.width_b = 5,
		nlOOl0i.width_o = 5;
	oper_add   nlOOl0O
	( 
	.a({(~ n111lO), (~ n111ll), (~ n111li), (~ n111iO), (~ n111il), (~ n111ii), (~ n1110O), (~ n1110l)}),
	.b({{7{1'b0}}, 1'b1}),
	.cin(1'b0),
	.cout(),
	.o(wire_nlOOl0O_o));
	defparam
		nlOOl0O.sgate_representation = 0,
		nlOOl0O.width_a = 8,
		nlOOl0O.width_b = 8,
		nlOOl0O.width_o = 8;
	oper_less_than   n1000i
	( 
	.a({3{1'b0}}),
	.b({wire_n010il_txcredvc0[17:15]}),
	.cin(1'b0),
	.o(wire_n1000i_o));
	defparam
		n1000i.sgate_representation = 0,
		n1000i.width_a = 3,
		n1000i.width_b = 3;
	oper_less_than   n1001i
	( 
	.a({3{1'b0}}),
	.b({wire_n010il_txcredvc0[20:19], ((nlOll1i26 ^ nlOll1i25) & wire_n010il_txcredvc0[18])}),
	.cin(1'b0),
	.o(wire_n1001i_o));
	defparam
		n1001i.sgate_representation = 0,
		n1001i.width_a = 3,
		n1001i.width_b = 3;
	oper_less_than   n11lOi
	( 
	.a({{9{1'b0}}, {3{1'b1}}}),
	.b({wire_nlOO0Oi_dataout, wire_nlOO0lO_dataout, wire_nlOO0ll_dataout, wire_nlOO0li_dataout, wire_nlOO0iO_dataout, ((nlOliil40 ^ nlOliil39) & wire_nlOO0il_dataout), ((nlOliiO38 ^ nlOliiO37) & wire_nlOO0ii_dataout), wire_nlOO00O_dataout, wire_nlOO00l_dataout, wire_nlOO00i_dataout, wire_nlOO01O_dataout, wire_nlOO01l_dataout}),
	.cin(1'b0),
	.o(wire_n11lOi_o));
	defparam
		n11lOi.sgate_representation = 0,
		n11lOi.width_a = 12,
		n11lOi.width_b = 12;
	oper_less_than   n11O1l
	( 
	.a({{5{1'b0}}, {3{1'b1}}}),
	.b({wire_nlOOiOl_dataout, wire_nlOOiOi_dataout, wire_nlOOilO_dataout, wire_nlOOill_dataout, wire_nlOOili_dataout, wire_nlOOiiO_dataout, wire_nlOOiil_dataout, wire_nlOOiii_dataout}),
	.cin(1'b0),
	.o(wire_n11O1l_o));
	defparam
		n11O1l.sgate_representation = 0,
		n11O1l.width_a = 8,
		n11O1l.width_b = 8;
	oper_less_than   nlOOi0i
	( 
	.a({{2{1'b0}}, 1'b1}),
	.b({wire_n010il_txcredvc0[20:18]}),
	.cin(1'b0),
	.o(wire_nlOOi0i_o));
	defparam
		nlOOi0i.sgate_representation = 0,
		nlOOi0i.width_a = 3,
		nlOOi0i.width_b = 3;
	oper_less_than   nlOOl0l
	( 
	.a({{2{1'b0}}, 1'b1}),
	.b({wire_n010il_txcredvc0[17:15]}),
	.cin(1'b0),
	.o(wire_nlOOl0l_o));
	defparam
		nlOOl0l.sgate_representation = 0,
		nlOOl0l.width_a = 3,
		nlOOl0l.width_b = 3;
	oper_less_than   nlOOlil
	( 
	.a({1'b0, 1'b1, {10{1'b0}}}),
	.b({nlOOOOO, nlOOOOl, nlOOOOi, nlOOOlO, nlOOOll, nlOOOli, nlOOOiO, nlOOOil, nlOOOii, nlOOO0O, nlOOO0l, nlOOO0i}),
	.cin(1'b0),
	.o(wire_nlOOlil_o));
	defparam
		nlOOlil.sgate_representation = 0,
		nlOOlil.width_a = 12,
		nlOOlil.width_b = 12;
	oper_less_than   nlOOliO
	( 
	.a({1'b0, 1'b1, {6{1'b0}}}),
	.b({n111lO, n111ll, ((nlOl0Ol52 ^ nlOl0Ol51) & n111li), n111iO, ((nlOl0OO50 ^ nlOl0OO49) & n111il), n111ii, n1110O, n1110l}),
	.cin(1'b0),
	.o(wire_nlOOliO_o));
	defparam
		nlOOliO.sgate_representation = 0,
		nlOOliO.width_a = 8,
		nlOOliO.width_b = 8;
	stratixiv_hssi_pcie_hip   n010il
	( 
	.bistdonearcv0(),
	.bistdonearcv1(),
	.bistdonearpl(),
	.bistdonebrcv0(),
	.bistdonebrcv1(),
	.bistdonebrpl(),
	.bistenrcv0(1'b0),
	.bistenrcv1(1'b0),
	.bistenrpl(1'b0),
	.bistpassrcv0(),
	.bistpassrcv1(),
	.bistpassrpl(),
	.bistscanen(1'b0),
	.bistscanin(1'b0),
	.bistscanoutrcv0(),
	.bistscanoutrcv1(),
	.bistscanoutrpl(),
	.bisttesten(1'b0),
	.clrrxpath(),
	.coreclkin(core_clk_in),
	.coreclkout(wire_n010il_coreclkout),
	.corecrst(crst),
	.corepor((~ npor)),
	.corerst((~ npor)),
	.coresrst(srst),
	.cplerr({cpl_err[6:0]}),
	.cplpending(cpl_pending),
	.dataenablen(),
	.dbgpipex1rx({15{1'b0}}),
	.derrcorextrcv0(wire_n010il_derrcorextrcv0),
	.derrcorextrcv1(),
	.derrcorextrpl(wire_n010il_derrcorextrpl),
	.derrrpl(wire_n010il_derrrpl),
	.dlackphypm(),
	.dlackrequpfc(),
	.dlacksndupfc(),
	.dlaspmcr0(1'b0),
	.dlcomclkreg(1'b0),
	.dlctrllink2({13{1'b0}}),
	.dlcurrentdeemp(),
	.dlcurrentspeed(),
	.dldataupfc({12{1'b0}}),
	.dldllreq(),
	.dlerrdll(),
	.dlerrphy(),
	.dlhdrupfc({8{1'b0}}),
	.dlinhdllp(1'b0),
	.dllinkautobdwstatus(),
	.dllinkbdwmngstatus(),
	.dlltssm(wire_n010il_dlltssm),
	.dlmaxploaddcr({3{1'b0}}),
	.dlreqphycfg({4{1'b0}}),
	.dlreqphypm({4{1'b0}}),
	.dlrequpfc(1'b0),
	.dlreqwake(1'b0),
	.dlrpbufemp(),
	.dlrstentercompbit(),
	.dlrsttxmarginfield(),
	.dlrxecrcchk(1'b0),
	.dlrxtyppm(),
	.dlrxvalpm(),
	.dlsndupfc(1'b0),
	.dltxackpm(),
	.dltxcfgextsy(1'b0),
	.dltxreqpm(1'b0),
	.dltxtyppm({3{1'b0}}),
	.dltypupfc({2{1'b0}}),
	.dlup(),
	.dlupexit(wire_n010il_dlupexit),
	.dlvcctrl({8{1'b0}}),
	.dlvcidmap({24{1'b0}}),
	.dlvcidupfc({3{1'b0}}),
	.dlvcstatus(),
	.dpclk(1'b0),
	.dpriodisable(1'b1),
	.dprioin(1'b0),
	.dprioload(1'b0),
	.dprioout(),
	.dpriostate(),
	.eidleinfersel(wire_n010il_eidleinfersel),
	.ev128ns(wire_n010il_ev128ns),
	.ev1us(wire_n010il_ev1us),
	.extraclkout(wire_n010il_extraclkout),
	.extraout(wire_n010il_extraout),
	.gen2rate(wire_n010il_gen2rate),
	.gen2rategnd(),
	.hotrstexit(wire_n010il_hotrstexit),
	.intstatus(wire_n010il_intstatus),
	.l2exit(wire_n010il_l2exit),
	.laneact(wire_n010il_laneact),
	.linkup(),
	.lmiack(wire_n010il_lmiack),
	.lmiaddr({lmi_addr[11:0]}),
	.lmidin({lmi_din[31:0]}),
	.lmidout(wire_n010il_lmidout),
	.lmirden(lmi_rden),
	.lmiwren(lmi_wren),
	.ltssml0state(),
	.mode({2{1'b0}}),
	.mramhiptestenable(1'b0),
	.mramregscanen(1'b0),
	.mramregscanin(1'b0),
	.mramregscanout(),
	.pclkcentral(pclk_central),
	.pclkch0(pclk_ch0),
	.phyrst((~ npor)),
	.physrst(srst),
	.phystatus({phystatus7_ext, phystatus6_ext, phystatus5_ext, phystatus4_ext, phystatus3_ext, phystatus2_ext, phystatus1_ext, phystatus0_ext}),
	.pldclk(pld_clk),
	.pldrst((~ npor)),
	.pldsrst(srst),
	.pllfixedclk(pll_fixed_clk),
	.powerdown(wire_n010il_powerdown),
	.r2cerr0ext(),
	.resetstatus(wire_n010il_resetstatus),
	.rxbardecvc0(wire_n010il_rxbardecvc0),
	.rxbardecvc1(),
	.rxbevc00(wire_n010il_rxbevc00),
	.rxbevc01(wire_n010il_rxbevc01),
	.rxbevc10(),
	.rxbevc11(),
	.rxdata({rxdata7_ext[7:0], rxdata6_ext[7:0], rxdata5_ext[7:0], rxdata4_ext[7:0], rxdata3_ext[7:0], rxdata2_ext[7:0], rxdata1_ext[7:0], rxdata0_ext[7:0]}),
	.rxdatak({rxdatak7_ext, rxdatak6_ext, rxdatak5_ext, rxdatak4_ext, rxdatak3_ext, rxdatak2_ext, rxdatak1_ext, rxdatak0_ext}),
	.rxdatavc00(wire_n010il_rxdatavc00),
	.rxdatavc01(wire_n010il_rxdatavc01),
	.rxdatavc10(),
	.rxdatavc11(),
	.rxelecidle({rxelecidle7_ext, rxelecidle6_ext, rxelecidle5_ext, rxelecidle4_ext, rxelecidle3_ext, rxelecidle2_ext, rxelecidle1_ext, rxelecidle0_ext}),
	.rxeopvc00(wire_n010il_rxeopvc00),
	.rxeopvc01(wire_n010il_rxeopvc01),
	.rxeopvc10(),
	.rxeopvc11(),
	.rxerrvc0(wire_n010il_rxerrvc0),
	.rxerrvc1(),
	.rxfifoemptyvc0(wire_n010il_rxfifoemptyvc0),
	.rxfifoemptyvc1(),
	.rxfifofullvc0(wire_n010il_rxfifofullvc0),
	.rxfifofullvc1(),
	.rxfifordpvc0(),
	.rxfifordpvc1(),
	.rxfifowrpvc0(),
	.rxfifowrpvc1(),
	.rxmaskvc0(rx_st_mask0),
	.rxmaskvc1(1'b0),
	.rxpolarity(wire_n010il_rxpolarity),
	.rxreadyvc0(rx_st_ready0),
	.rxreadyvc1(1'b0),
	.rxsopvc00(wire_n010il_rxsopvc00),
	.rxsopvc01(wire_n010il_rxsopvc01),
	.rxsopvc10(),
	.rxsopvc11(),
	.rxstatus({rxstatus7_ext[2:0], rxstatus6_ext[2:0], rxstatus5_ext[2:0], rxstatus4_ext[2:0], rxstatus3_ext[2:0], rxstatus2_ext[2:0], rxstatus1_ext[2:0], rxstatus0_ext[2:0]}),
	.rxvalid({rxvalid7_ext, rxvalid6_ext, rxvalid5_ext, rxvalid4_ext, rxvalid3_ext, rxvalid2_ext, rxvalid1_ext, rxvalid0_ext}),
	.rxvalidvc0(wire_n010il_rxvalidvc0),
	.rxvalidvc1(),
	.scanen(1'b0),
	.scanmoden(1'b1),
	.serrout(wire_n010il_serrout),
	.successspeednegoint(),
	.swdnin({3{1'b0}}),
	.swdnwake(wire_n010il_swdnwake),
	.swuphotrst(wire_n010il_swuphotrst),
	.swupin({7{1'b0}}),
	.testin({test_in[39:0]}),
	.testout(wire_n010il_testout),
	.tlaermsinum({aer_msi_num[4:0]}),
	.tlappintaack(wire_n010il_tlappintaack),
	.tlappintasts(app_int_sts),
	.tlappmsiack(wire_n010il_tlappmsiack),
	.tlappmsinum({app_msi_num[4:0]}),
	.tlappmsireq(app_msi_req),
	.tlappmsitc({app_msi_tc[2:0]}),
	.tlcfgadd(wire_n010il_tlcfgadd),
	.tlcfgctl(wire_n010il_tlcfgctl),
	.tlcfgctlwr(wire_n010il_tlcfgctlwr),
	.tlcfgsts(wire_n010il_tlcfgsts),
	.tlcfgstswr(wire_n010il_tlcfgstswr),
	.tlhpgctrler({hpg_ctrler[4:0]}),
	.tlpexmsinum({pex_msi_num[4:0]}),
	.tlpmauxpwr(pm_auxpwr),
	.tlpmdata({pm_data[9:0]}),
	.tlpmetocr(pme_to_cr),
	.tlpmetosr(wire_n010il_tlpmetosr),
	.tlpmevent(pm_event),
	.tlslotclkcfg(1'b1),
	.txcompl(wire_n010il_txcompl),
	.txcredvc0(wire_n010il_txcredvc0),
	.txcredvc1(),
	.txdata(wire_n010il_txdata),
	.txdatak(wire_n010il_txdatak),
	.txdatavc00({tx_st_data0[63:0]}),
	.txdatavc01({tx_st_data0_p1[63:0]}),
	.txdatavc10({64{1'b0}}),
	.txdatavc11({64{1'b0}}),
	.txdeemph(wire_n010il_txdeemph),
	.txdetectrx(wire_n010il_txdetectrx),
	.txelecidle(wire_n010il_txelecidle),
	.txeopvc00(tx_st_eop0),
	.txeopvc01(tx_st_eop0_p1),
	.txeopvc10(1'b0),
	.txeopvc11(1'b0),
	.txerrvc0(tx_st_err0),
	.txerrvc1(1'b0),
	.txfifoemptyvc0(wire_n010il_txfifoemptyvc0),
	.txfifoemptyvc1(),
	.txfifofullvc0(wire_n010il_txfifofullvc0),
	.txfifofullvc1(),
	.txfifordpvc0(wire_n010il_txfifordpvc0),
	.txfifordpvc1(),
	.txfifowrpvc0(wire_n010il_txfifowrpvc0),
	.txfifowrpvc1(),
	.txmargin(wire_n010il_txmargin),
	.txreadyvc0(wire_n010il_txreadyvc0),
	.txreadyvc1(),
	.txsopvc00(tx_st_sop0),
	.txsopvc01(tx_st_sop0_p1),
	.txsopvc10(1'b0),
	.txsopvc11(1'b0),
	.txvalidvc0(tx_st_valid0),
	.txvalidvc1(1'b0),
	.wakeoen(wire_n010il_wakeoen),
	.extrain()
	);
	defparam
		n010il.advanced_errors = "false",
		n010il.bar0_64bit_mem_space = "false",
		n010il.bar0_io_space = "false",
		n010il.bar0_prefetchable = "false",
		n010il.bar0_size_mask = 10,
		n010il.bar1_64bit_mem_space = "false",
		n010il.bar1_io_space = "false",
		n010il.bar1_prefetchable = "false",
		n010il.bar1_size_mask = 0,
		n010il.bar2_64bit_mem_space = "false",
		n010il.bar2_io_space = "false",
		n010il.bar2_prefetchable = "false",
		n010il.bar2_size_mask = 0,
		n010il.bar3_64bit_mem_space = "false",
		n010il.bar3_io_space = "false",
		n010il.bar3_prefetchable = "false",
		n010il.bar3_size_mask = 0,
		n010il.bar4_64bit_mem_space = "false",
		n010il.bar4_io_space = "false",
		n010il.bar4_prefetchable = "false",
		n010il.bar4_size_mask = 0,
		n010il.bar5_64bit_mem_space = "false",
		n010il.bar5_io_space = "false",
		n010il.bar5_prefetchable = "false",
		n010il.bar5_size_mask = 0,
		n010il.bar_io_window_size = "32BIT",
		n010il.bar_prefetchable = 32,
		n010il.bridge_port_ssid_support = "false",
		n010il.bridge_port_vga_enable = "false",
		n010il.bypass_cdc = "false",
		n010il.bypass_tl = "false",
		n010il.class_code = 16711680,
		n010il.completion_timeout = "ABCD",
		n010il.core_clk_divider = 1,
		n010il.core_clk_source = "PLL_FIXED_CLK",
		n010il.credit_buffer_allocation_aux = "BALANCED",
		n010il.deemphasis_enable = "false",
		n010il.device_id = 4,
		n010il.device_number = 0,
		n010il.diffclock_nfts_count = 255,
		n010il.disable_cdc_clk_ppm = "false",
		n010il.disable_link_x2_support = "false",
		n010il.disable_snoop_packet = 8'h00,
		n010il.dll_active_report_support = "false",
		n010il.ei_delay_powerdown_count = 10,
		n010il.eie_before_nfts_count = 4,
		n010il.enable_adapter_half_rate_mode = "true",
		n010il.enable_ch0_pclk_out = "false",
		n010il.enable_completion_timeout_disable = "true",
		n010il.enable_coreclk_out_half_rate = "true",
		n010il.enable_ecrc_check = "false",
		n010il.enable_ecrc_gen = "false",
		n010il.enable_function_msi_support = "true",
		n010il.enable_function_msix_support = "false",
		n010il.enable_gen2_core = "true",
		n010il.enable_hip_x1_loopback = "false",
		n010il.enable_l1_aspm = "false",
		n010il.enable_msi_64bit_addressing = "true",
		n010il.enable_msi_masking = "false",
		n010il.enable_retrybuf_ecc = "true",
		n010il.enable_retrybuf_x8_clk_stealing = 0,
		n010il.enable_rx0buf_ecc = "true",
		n010il.enable_rx0buf_x8_clk_stealing = 0,
		n010il.enable_rx1buf_ecc = "true",
		n010il.enable_rx1buf_x8_clk_stealing = 0,
		n010il.enable_rx_buffer_checking = "true",
		n010il.enable_rx_reordering = "true",
		n010il.enable_slot_register = "false",
		n010il.endpoint_l0_latency = 0,
		n010il.endpoint_l1_latency = 0,
		n010il.expansion_base_address_register = 0,
		n010il.extend_tag_field = "true",
		n010il.fc_init_timer = 1024,
		n010il.flow_control_timeout_count = 200,
		n010il.flow_control_update_count = 30,
		n010il.gen2_diffclock_nfts_count = 255,
		n010il.gen2_lane_rate_mode = "true",
		n010il.gen2_sameclock_nfts_count = 255,
		n010il.hot_plug_support = 8'h00,
		n010il.indicator = 0,
		n010il.l01_entry_latency = 31,
		n010il.l0_exit_latency_diffclock = 7,
		n010il.l0_exit_latency_sameclock = 7,
		n010il.l1_exit_latency_diffclock = 7,
		n010il.l1_exit_latency_sameclock = 7,
		n010il.lane_mask = 8'h00,
		n010il.low_priority_vc = 0,
		n010il.lpm_type = "stratixiv_hssi_pcie_hip",
		n010il.max_link_width = 8,
		n010il.max_payload_size = 1,
		n010il.maximum_current = 0,
		n010il.millisecond_cycle_count = 250000,
		n010il.msi_function_count = 0,
		n010il.msix_pba_bir = 0,
		n010il.msix_pba_offset = 0,
		n010il.msix_table_bir = 0,
		n010il.msix_table_offset = 0,
		n010il.msix_table_size = 0,
		n010il.no_command_completed = "true",
		n010il.no_soft_reset = "true",
		n010il.pcie_mode = "SHARED_MODE",
		n010il.pme_state_enable = 8'h00,
		n010il.port_link_number = 1,
		n010il.register_pipe_signals = "false",
		n010il.retry_buffer_last_active_address = 2047,
		n010il.retry_buffer_memory_settings = 0,
		n010il.revision_id = 1,
		n010il.rx_ptr0_nonposted_dpram_max = 0,
		n010il.rx_ptr0_nonposted_dpram_min = 0,
		n010il.rx_ptr0_posted_dpram_max = 0,
		n010il.rx_ptr0_posted_dpram_min = 0,
		n010il.rx_ptr1_nonposted_dpram_max = 0,
		n010il.rx_ptr1_nonposted_dpram_min = 0,
		n010il.rx_ptr1_posted_dpram_max = 0,
		n010il.rx_ptr1_posted_dpram_min = 0,
		n010il.sameclock_nfts_count = 255,
		n010il.single_rx_detect = 0,
		n010il.skp_os_schedule_count = 0,
		n010il.slot_number = 0,
		n010il.slot_power_limit = 0,
		n010il.slot_power_scale = 0,
		n010il.ssid = 0,
		n010il.ssvid = 0,
		n010il.subsystem_device_id = 4,
		n010il.subsystem_vendor_id = 4466,
		n010il.surprise_down_error_support = "false",
		n010il.tx_cdc_full_value = 12,
		n010il.use_crc_forwarding = "false",
		n010il.vc0_clk_enable = "true",
		n010il.vc0_rx_buffer_memory_settings = 0,
		n010il.vc0_rx_flow_ctrl_compl_data = 448,
		n010il.vc0_rx_flow_ctrl_compl_header = 112,
		n010il.vc0_rx_flow_ctrl_nonposted_data = 0,
		n010il.vc0_rx_flow_ctrl_nonposted_header = 54,
		n010il.vc0_rx_flow_ctrl_posted_data = 360,
		n010il.vc0_rx_flow_ctrl_posted_header = 50,
		n010il.vc1_clk_enable = "false",
		n010il.vc1_rx_buffer_memory_settings = 0,
		n010il.vc1_rx_flow_ctrl_compl_data = 448,
		n010il.vc1_rx_flow_ctrl_compl_header = 112,
		n010il.vc1_rx_flow_ctrl_nonposted_data = 0,
		n010il.vc1_rx_flow_ctrl_nonposted_header = 54,
		n010il.vc1_rx_flow_ctrl_posted_data = 360,
		n010il.vc1_rx_flow_ctrl_posted_header = 50,
		n010il.vc_arbitration = 0,
		n010il.vc_enable = 8'h00,
		n010il.vendor_id = 4466;
	assign
		app_int_ack = wire_n010il_tlappintaack,
		app_msi_ack = wire_n010il_tlappmsiack,
		avs_pcie_reconfig_readdata = {16{1'b0}},
		avs_pcie_reconfig_readdatavalid = 1'b0,
		avs_pcie_reconfig_waitrequest = 1'b1,
		core_clk_out = wire_n010il_coreclkout,
		CraIrq_o = 1'b0,
		CraReadData_o = {32{1'b0}},
		CraWaitRequest_o = 1'b0,
		derr_cor_ext_rcv0 = wire_n010il_derrcorextrcv0,
		derr_cor_ext_rpl = wire_n010il_derrcorextrpl,
		derr_rpl = wire_n010il_derrrpl,
		dl_ltssm = {wire_n010il_dlltssm[4:0]},
		dlup_exit = wire_n010il_dlupexit,
		eidle_infer_sel = {wire_n010il_eidleinfersel[23:0]},
		ev_128ns = wire_n010il_ev128ns,
		ev_1us = wire_n010il_ev1us,
		hip_extraclkout = {wire_n010il_extraclkout[1:0]},
		hotrst_exit = wire_n010il_hotrstexit,
		int_status = {wire_n010il_intstatus[3:0]},
		l2_exit = wire_n010il_l2exit,
		lane_act = {wire_n010il_laneact[3:0]},
		lmi_ack = wire_n010il_lmiack,
		lmi_dout = {wire_n010il_lmidout[31:0]},
		nlOl0lO = (wire_nlOOlil_o & (((~ wire_n010il_txcredvc0[18]) & (~ wire_n010il_txcredvc0[19])) & (~ wire_n010il_txcredvc0[20]))),
		nlOl0Oi = (wire_nlOOliO_o & (((~ wire_n010il_txcredvc0[15]) & (~ wire_n010il_txcredvc0[16])) & (~ wire_n010il_txcredvc0[17]))),
		nlOli0i = ((((((((((((~ wire_nlOO0Oi_dataout) & (~ wire_nlOO0lO_dataout)) & (~ wire_nlOO0ll_dataout)) & (~ wire_nlOO0li_dataout)) & (~ wire_nlOO0iO_dataout)) & (~ wire_nlOO0il_dataout)) & (~ wire_nlOO0ii_dataout)) & (~ wire_nlOO00O_dataout)) & (~ wire_nlOO00l_dataout)) & (~ wire_nlOO00i_dataout)) & (~ wire_nlOO01O_dataout)) & (~ wire_nlOO01l_dataout)),
		nlOliii = ((((((((~ wire_nlOOiOl_dataout) & (~ wire_nlOOiOi_dataout)) & (~ wire_nlOOilO_dataout)) & (~ wire_nlOOill_dataout)) & (~ wire_nlOOili_dataout)) & (~ wire_nlOOiiO_dataout)) & (~ wire_nlOOiil_dataout)) & (~ wire_nlOOiii_dataout)),
		nlOll0O = ((nlOlO1l & (tx_st_data0[30] & nlOlO1i)) & (nlOllii20 ^ nlOllii19)),
		nlOll1l = ((tx_st_err0 & tx_st_valid0) & (nlOll1O24 ^ nlOll1O23)),
		nlOlliO = ((~ tx_st_err0) & ((tx_st_valid0 & nlOllOO) & (nlOllli18 ^ nlOllli17))),
		nlOllOl = (nlOlO1i & nlOllOO),
		nlOllOO = ((tx_st_eop0 | (tx_st_eop0 ^ tx_st_eop0_p1)) | (~ (nlOlllO16 ^ nlOlllO15))),
		nlOlO0l = ((((((~ tx_st_data0[24]) & (~ tx_st_data0[25])) & tx_st_data0[26]) & (~ tx_st_data0[27])) & (~ tx_st_data0[28])) & (~ tx_st_data0[29])),
		nlOlO1i = (tx_st_sop0 & tx_st_valid0),
		nlOlO1l = ((((((~ tx_st_data0[30]) & nlOlOli) | ((((~ tx_st_data0[29]) & tx_st_data0[30]) & (~ ((((~ tx_st_data0[24]) & (~ tx_st_data0[25])) & (~ tx_st_data0[26])) & (nlOlOil10 ^ nlOlOil9)))) & nlOlOli)) | (~ (nlOlO0O12 ^ nlOlO0O11))) & (~ nlOlO0l)) & (nlOlO1O14 ^ nlOlO1O13)),
		nlOlOli = ((~ tx_st_data0[27]) & (~ tx_st_data0[28])),
		nlOlOlO = 1'b1,
		nlOlOOl = ((n1iO0l ^ n1i10l) ^ (~ (nlOlOOO4 ^ nlOlOOO3))),
		nlOO11l = ((n1iO1l ^ n1ilOO) ^ (~ (nlOO11O2 ^ nlOO11O1))),
		npd_alloc_1cred_vc0 = nlOOlOl,
		npd_cred_vio_vc0 = nlOOlll,
		nph_alloc_1cred_vc0 = nlOOlOO,
		nph_cred_vio_vc0 = nlOOlOi,
		pme_to_sr = wire_n010il_tlpmetosr,
		powerdown0_ext = {wire_n010il_powerdown[1:0]},
		powerdown1_ext = {wire_n010il_powerdown[3:2]},
		powerdown2_ext = {wire_n010il_powerdown[5:4]},
		powerdown3_ext = {wire_n010il_powerdown[7:6]},
		powerdown4_ext = {wire_n010il_powerdown[9:8]},
		powerdown5_ext = {wire_n010il_powerdown[11:10]},
		powerdown6_ext = {wire_n010il_powerdown[13:12]},
		powerdown7_ext = {wire_n010il_powerdown[15:14]},
		r2c_err0 = wire_n010il_extraout[1],
		rate_ext = wire_n010il_gen2rate,
		rc_gxb_powerdown = 1'b0,
		rc_rx_analogreset = 1'b0,
		rc_rx_digitalreset = 1'b0,
		rc_tx_digitalreset = 1'b0,
		reset_status = wire_n010il_resetstatus,
		rx_fifo_empty0 = wire_n010il_rxfifoemptyvc0,
		rx_fifo_full0 = wire_n010il_rxfifofullvc0,
		rx_st_bardec0 = {wire_n010il_rxbardecvc0[7:0]},
		rx_st_be0 = {wire_n010il_rxbevc00[7:0]},
		rx_st_be0_p1 = {wire_n010il_rxbevc01[7:0]},
		rx_st_data0 = {wire_n010il_rxdatavc00[63:0]},
		rx_st_data0_p1 = {wire_n010il_rxdatavc01[63:0]},
		rx_st_eop0 = wire_n010il_rxeopvc00,
		rx_st_eop0_p1 = wire_n010il_rxeopvc01,
		rx_st_err0 = wire_n010il_rxerrvc0,
		rx_st_sop0 = wire_n010il_rxsopvc00,
		rx_st_sop0_p1 = wire_n010il_rxsopvc01,
		rx_st_valid0 = wire_n010il_rxvalidvc0,
		RxmAddress_o = {32{1'b0}},
		RxmBurstCount_o = {10{1'b0}},
		RxmByteEnable_o = {8{1'b0}},
		RxmRead_o = 1'b0,
		RxmWrite_o = 1'b0,
		RxmWriteData_o = {64{1'b0}},
		rxpolarity0_ext = wire_n010il_rxpolarity[0],
		rxpolarity1_ext = wire_n010il_rxpolarity[1],
		rxpolarity2_ext = wire_n010il_rxpolarity[2],
		rxpolarity3_ext = wire_n010il_rxpolarity[3],
		rxpolarity4_ext = wire_n010il_rxpolarity[4],
		rxpolarity5_ext = wire_n010il_rxpolarity[5],
		rxpolarity6_ext = wire_n010il_rxpolarity[6],
		rxpolarity7_ext = wire_n010il_rxpolarity[7],
		serr_out = wire_n010il_serrout,
		suc_spd_neg = wire_n010il_extraout[0],
		swdn_wake = wire_n010il_swdnwake,
		swup_hotrst = wire_n010il_swuphotrst,
		test_out = {wire_n010il_testout[63:0]},
		tl_cfg_add = {n10iOl, n10iOO, n10l1i, n10l1l},
		tl_cfg_ctl = {n10l1O, n10l0i, n10l0l, n10l0O, n10lii, n10lil, n10liO, n10lli, n10lll, n10llO, n10lOi, n10lOl, n10lOO, n10O1i, n10O1l, n10O1O, n10O0i, n10O0l, n10O0O, n10Oii, n10Oil, n10OiO, n10Oli, n10Oll, n10OlO, n10OOi, n10OOl, n10OOO, n1i11i, n1i11l, n1i11O, n1i10i},
		tl_cfg_ctl_wr = n1i10l,
		tl_cfg_sts = {n1i10O, n1i1ii, n1i1il, n1i1iO, n1i1li, n1i1ll, n1i1lO, n1i1Oi, n1i1Ol, n1i1OO, n1i01i, n1i01l, n1i01O, n1i00i, n1i00l, n1i00O, n1i0ii, n1i0il, n1i0iO, n1i0li, n1i0ll, n1i0lO, n1i0Oi, n1i0Ol, n1i0OO, n1ii1i, n1ii1l, n1ii1O, n1ii0i, n1ii0l, n1ii0O, n1iiii, n1iiil, n1iiiO, n1iili, n1iill, n1iilO, n1iiOi, n1iiOl, n1iiOO, n1il1i, n1il1l, n1il1O, n1il0i, n1il0l, n1il0O, n1ilii, n1ilil, n1iliO, n1illi, n1illl, n1illO, n1ilOi},
		tl_cfg_sts_wr = n1ilOO,
		tx_cred0 = {wire_n010il_txcredvc0[35:21], n1111O, n1111l, n1111i, n111OO, n111Ol, n111Oi, wire_n010il_txcredvc0[14:0]},
		tx_deemph = {wire_n010il_txdeemph[7:0]},
		tx_fifo_empty0 = wire_n010il_txfifoemptyvc0,
		tx_fifo_full0 = wire_n010il_txfifofullvc0,
		tx_fifo_rdptr0 = {wire_n010il_txfifordpvc0[3:0]},
		tx_fifo_wrptr0 = {wire_n010il_txfifowrpvc0[3:0]},
		tx_margin = {wire_n010il_txmargin[23:0]},
		tx_st_ready0 = wire_n010il_txreadyvc0,
		txcompl0_ext = wire_n010il_txcompl[0],
		txcompl1_ext = wire_n010il_txcompl[1],
		txcompl2_ext = wire_n010il_txcompl[2],
		txcompl3_ext = wire_n010il_txcompl[3],
		txcompl4_ext = wire_n010il_txcompl[4],
		txcompl5_ext = wire_n010il_txcompl[5],
		txcompl6_ext = wire_n010il_txcompl[6],
		txcompl7_ext = wire_n010il_txcompl[7],
		txdata0_ext = {wire_n010il_txdata[7:0]},
		txdata1_ext = {wire_n010il_txdata[15:8]},
		txdata2_ext = {wire_n010il_txdata[23:16]},
		txdata3_ext = {wire_n010il_txdata[31:24]},
		txdata4_ext = {wire_n010il_txdata[39:32]},
		txdata5_ext = {wire_n010il_txdata[47:40]},
		txdata6_ext = {wire_n010il_txdata[55:48]},
		txdata7_ext = {wire_n010il_txdata[63:56]},
		txdatak0_ext = wire_n010il_txdatak[0],
		txdatak1_ext = wire_n010il_txdatak[1],
		txdatak2_ext = wire_n010il_txdatak[2],
		txdatak3_ext = wire_n010il_txdatak[3],
		txdatak4_ext = wire_n010il_txdatak[4],
		txdatak5_ext = wire_n010il_txdatak[5],
		txdatak6_ext = wire_n010il_txdatak[6],
		txdatak7_ext = wire_n010il_txdatak[7],
		txdetectrx0_ext = wire_n010il_txdetectrx[0],
		txdetectrx1_ext = wire_n010il_txdetectrx[1],
		txdetectrx2_ext = wire_n010il_txdetectrx[2],
		txdetectrx3_ext = wire_n010il_txdetectrx[3],
		txdetectrx4_ext = wire_n010il_txdetectrx[4],
		txdetectrx5_ext = wire_n010il_txdetectrx[5],
		txdetectrx6_ext = wire_n010il_txdetectrx[6],
		txdetectrx7_ext = wire_n010il_txdetectrx[7],
		txelecidle0_ext = wire_n010il_txelecidle[0],
		txelecidle1_ext = wire_n010il_txelecidle[1],
		txelecidle2_ext = wire_n010il_txelecidle[2],
		txelecidle3_ext = wire_n010il_txelecidle[3],
		txelecidle4_ext = wire_n010il_txelecidle[4],
		txelecidle5_ext = wire_n010il_txelecidle[5],
		txelecidle6_ext = wire_n010il_txelecidle[6],
		txelecidle7_ext = wire_n010il_txelecidle[7],
		TxsReadData_o = {64{1'b0}},
		TxsReadDataValid_o = 1'b0,
		TxsWaitRequest_o = 1'b0,
		use_pcie_reconfig = 1'b0,
		wake_oen = wire_n010il_wakeoen;
endmodule //PCIeGen2x8If128_core
//synopsys translate_on
//VALID FILE
